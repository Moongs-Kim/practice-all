[git fast forward vs 3-way-merge]

<fast forward>
상황 : main 브랜치의 마지막 커밋에서 하나의 브랜치가 생성되어 1개 이상의 커밋이 있다.

이 상황에서 main 브랜치에서 새로운 브랜치를 커밋하면 main 브랜치는 굳이 새로운 커밋을 만들 필요 없이
새 브랜치의 최신 커밋으로 헤드를 이동하면된다.
* rebase를 통해 재배치를 진행한 후 다시 merge를 통해 헤드를 옮기는 과정이 사실은 fast forward인 것이다.

이게 fast forward이다.

하지만 fast forward의 단점은 어떤 브랜치를 사용했고 언제 병합했는지 '기록이 남지 않는다'는 것이다.
fast forward 하지 않고 커밋을 만들어 병합 하려면

git merge --no-ff 병합할 브랜치 명

위 명령어를 사용하면 된다.

<3-way-merge>
상황 : main 브랜치에 4개의 커밋이 있다고 가정하고
      main의 2번째 커밋에서 새로운 브랜치가 만들어져 1개 이상의 커밋이 있다.

이 상황에서 main 브랜치에서 merge를 하면 평소 merge와 동일한 상황이 발생한다.
이걸 3-way-merge라고 한다.

-- 3-way-merge 라고 부르는 이유 --
예로 A와 B 브랜치를 병합할 때 두 브랜치의 최신 커밋 모두에 속하는 어떤 파일이 서로 다른 내용을 가지고 있다면
각 파일은 A 브랜치에서 변경되었는지, B 브랜치에서 변경되었는지, 혹은 두 브랜치 모두에서 변경되어 충돌이 발생하는지
확인해야 한다.
하지만 이 상황에서 A와 B 브랜치의 최신 커밋 두 개만 봐서는 알 수가 없다.
이걸 파악하기 위해 두 브랜치의 공통 조상이 되는 커밋에서 A와 B 커밋을 비교한다.

따라서 A와 B 커밋 + 공통 조상의 커밋 3개를 비교한다고 해서 3-way-merge라고 부르는 것이다.

* 3-way-merge는 깃 내부에서 일어나는 일이므로 이에 대해 반드시 이해하지 않아도 실무에서 깃을
  사용하는 데 지장은 없다.