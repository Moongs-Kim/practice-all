[git github 명령어]

깃허브는 모든 업로드와 다운로드를 커밋 단위로 주고 받는다
깃허브는 다른 사람의 작업을 덮어씌우거나 충돌할 걱정 없이 편하게 협업할 수 있게 한다.

git push : 로컬에 있는 커밋 내역 중에서 아직 원격 저장소에 없는 커밋을 업로드

git remote add origin 주소
    -git remote add : 원격 저장소를 추가
    -origin : 원격 저장소 이름, 이름이므로 꼭 origin이 아니여도됨

git branch -M main : 프로젝트의 기본 브랜치 이름을 main으로 바꿔 주는 것

git push -u origin main : 현재 로컬의 (main)브랜치가 원격(origin) 저장소의 어떤 브랜치와 연동될지 지정
    -> 현재 내 로컬의 main 브랜치에서 푸시할 때 원격 저장소의 어느 브랜치(main)에 푸시할지를 기본으로 설정
       설정 후 git push만 입력해도 origin/main 브랜치로 업로드
    -> 위 명령에서 -u는 --set-upstream과 동일하다

git remote : 해당 프로젝트와 연결된 원격 저장소의 목록을 보여줌
git remote -v : 원격 저장소의 목록과 함께 저장소 주소도 확인 가능
git remote remove 원격저장소 명 : 원격 저장소와의 연결 끊기. 원격 저장소를 삭제하는건 아님

git pull : 깃허브 원격 저장소의 커밋을 내 로컬 컴퓨터로 가져온다

<pull할것이 있는데 push 할때>
이때는 git push 실행시 오류가 발생
깃허브의 최신 내역을 pull 하지 않았기 때문
자신의 원격 저장소에서 무언가를 푸시하려면 내 작업 내역이 원격 저장소의 최신 내역과 동일하게 맞춰져 있어야 한다.

--이때 풀하는 방법--
1. merge 방식 = --no-rebase
2. rebase 방식
위 두 가지 방식중 하나를 기본값으로 설정할 수 있음, 설정 업으면 --no-rebase가 디폴트

git pull --no-rebase
내 로컬과 원격 저장소의 커밋을 통합한 커밋을 만들어 동기화
로컬 컴퓨터와 원격 저장소의 어긋난 타임라인을 한군데로 모아 주는 방식

git pull --rebase -> 이후 git push
원격 저장소의 타임라인을 유지 후 로컬 컴퓨터의 커밋을 원격 저장소의 커밋에 재배치
즉 원격에서의 변화가 먼저 발생한 것으로 하고, 내 작업은 그 이후 적용된 것으로 함

<충돌 해결>
git pull --no-rebase -> 충돌 -> 충돌 해결 -> git add, git commit

git pull --rebase -> 충돌 -> 충돌 해결 -> git add, git rebase --continue

* 원격 저장소의 작업을 pull 할때 리베이스는 협업시 사용해도 괜찮음

<로컬의 작업 내역을 강제로 푸시>
git push --force : 로컬 컴퓨터의 작업 내역을 기준으로 강제로 맞춰야 할때 사용

* 서로 합의가 된 상태에서 사용해야 한다.

<원격 저장소 브랜치 다루기>
로컬에서 새로운 브랜치를 만든 후 git push를 사용하면 푸시가 되지 않는다.
왜냐하면 새로운 브랜치를 어디에 푸시해야 할지 모르니 원격 저장소에 새 브랜치를 만들어야한다.

git push -u origin 새 브랜치 명 = git push --set-upstream origin 새 브랜치 명

gir branch --all = git branch -a : 로컬과 원격의 브랜치를 모두 확인
git fetch : 원격 저장소의 변경 사항 확인, 원격의 변화가 로컬에 업데이트가 안되어 있을때

git switch -t origin/원격 브랜치 명 : 로컬에 원격 브랜치와 같은 이름의 브랜치를 복사해서 연결

git push 원격 저장소 이름 --delete 원격 저장소 브랜치 이름 : 원격의 브랜치 삭제

<깃허브에서 프로젝트 다운로드>
git clone 원결저장소 주소 : 해당 프로젝트의 파일 및 .git 폴더 까지 가져온다

<README.md>
리드미 파일은 프로젝트에 대한 설명, 사용 방법, 라이선스 정보 등을 포함
즉 프로젝트에 대해 다른 사람이 참고할 수 있도록 작성한 설명서
.md는 마크다운 형식이다.

git add README.md : git init 후 이 명령을 실행하면 리드미 파일을 만들 수 있다.

리드미 파일 작성방법(문법)은 검색해서 참고하자
https://www.markdownguide.org/cheat-sheet

<pull request>
풀 리퀘스트란 코드 변경 사항을 검토하고 병합하기 위해 다른 개발자에게 요청하는 기능이다.
풀 리퀘스트를 통해 코드 변경 내용을 비교하고 논의 후 해당 브랜치로 통합할 수 있다.
즉 바로 변경 사항을 반영하는게 아닌 팀원들과 확인하고 합의 후 통합하는 것이다.
* pull request는 줄여서 PR 이라 부른다.

<issue>
이슈란 프로젝트 관련 문서, 개선 사항 또는 버그 등을 추적하고 관리하는 기능이다.
프로젝트에서 고쳐야할 오류나 문제, 요청 사항을 알리기 위한 저장소(깃허브) 게시판 같은 곳이다.
이슈를 등록하고 상태를 업데이트하여 진행 상황을 파악하고 팀원과 의견을 공유할 수 있다.

label(라벨) : 버그, 신기능, 문서 등 이슈의 종류를 이슈 제목 옆에 붙이는 배지
milestone(마일스톤) : 이슈의 주제 묶음

* 이슈를 생성하면 아래에 번호가 생긴다. 체계적으로 협업하는 팀에서는 어떤 이슈에 대한 수정 작업을 할 때
커밋 메세지 푸터에 이슈 번호를 같이 표기하기도 한다.


