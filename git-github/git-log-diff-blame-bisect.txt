[git log, diff, blame, bisect]

<log>
git log : 커밋 이름, 커밋 해시값 확인가능
git log -p : 커밋에서 변경 내역까지 같이 볼 수 있음
git log -3 (<- 숫자) : 최근 커밋 몇 개만 확인

조합 : git log -p -2 ->  최근 두 개 커밋과 변경 내역까지 볼 수 있음

git log --stat : 어떤 파일이 변했는지 변경 내역 확인
git log --shortstat : 어떤 파일이 변했는지 더 간략하게 확인
git log --oneline : 로그를 한 줄로 보기
* --oneline 옵션
        결과를 한 줄로 보여주는 --pritty=oneline 옵션과
        커밋 해시값을 짧게 나타내는 --abbrev-commit 옵션을 합친 것이다.

git log -S 검색할 단어 : 특정 커밋의 변경 사항에 있는 단어로 커밋을 검색
git log --grep 커밋 메세지 일부 : 커밋 메세지를 중 일부를 기준으로 검색

-- git log의 추가 옵션 --
    --since, --after : 명시한 날짜 이후의 커밋만 검색
    --until, --before : 명시한 날짜 이전의의 커밋만 조회
    --author : 입력한 저자의 커밋만 확인
    -- committer : 입력한 커미터의 커밋만 확인

<diff>
git diff 명령은 말 그대로 차이를 보여주는 명령이다. 변경 사항 확인 가능
변경된 파일과 내용 추가 또는 삭제 부분 비교

다양한 옵션을 통해 코드 리뷰나 버그 수정을 위한 코드의 변화를 파악하는 데 유용

git diff : 작업 디렉터리에서 일어난 변화 확인
git diff --name-only : 변경 사항이 발생한 파일 목록한 확인
git diff --staged : 스테이지 영역에 넘어간 변경 사항을 확인
    'git diff --staged 는 git diff --cached와 동일'
git diff --staged --name-only : 스테이지 영역에 변경된 파일 목록만 확인

git diff (커밋 해시값) (다른 커밋 해시값) : 커밋 간의 내용 차이 확인
git diff HEAD~ HEAD~10 : 1개 이전 커밋과 10개 전의 커밋 차이 확인

git diff (A 브랜치) (B 브랜치) : 브랜치 간의 변경 사항 차이도 확인

<blame>
git blame 파일명 : 누가 언제 파일의 어느 부분을 작성했는지 확인
git blame -L 10,12 파일명 : 파일의 10~12 라인 작성자 확인
git blame -L 10,+3 파일명 : 파일의 10부터 +3까지 작성자 확인

blame 명령을 사용해도 되나 작성자를 바로 확인할 수 있는 플러그인을 사용하면 더욱 편리하다.

<bisect>
이진 탐색 방법으로 오류 발생 지점을 찾아내는 명령

git bisect start : 이진 탐색 시작
git checkout 커밋 해시값 : 오류 의심 지점으로 헤드 이동
git bisect good : 오류 발생하지 않는다는걸 표시
git bisect bad : 오류가 발생하는걸 표시
git bisect reset : 이진 탐색을 종료하고 초기 상태로 돌림
