[git 태그]

* 프로그램 버전
프로그램의 버전은 보통 메이저, 마이너, 패치 세 가지 숫자로 표시

메이저 : 프로그램의 이전 버전에서 호환되지 않을 정도로 큰 변화나 업그레이드
마이너 : 새로운 기능이 추가되거나 기존 기능이 변경되는 정도
패치 : 버그 등 작은 문제를 수정한 것

* 태그에는 lightweight와 annotated 두 가지 종류가 있다

lightweight : 특정 커밋에 붙여서 태그 이름으로 지칭하는 것
annotated : 작성자 이름, 이메일, 날짜, 커밋 메세지, GPG 설명 등을 기입할 수 있다

필요에 맞게 쓰되 기왕 태그를 단다면 annotated로 달자

<마지막 커밋에 태그 달기>
git tag 태그명 : 특정 커밋을 지정하지 않으면 마지막 커밋에 태그가 달린다.

git tag : 태그 목록 확인

git show 태그명 : 지정한 태그명의 커밋 확인

git tag -d 태그명 : 지정한 태그명 삭제

git tag -a 태그명 : annotated 방식으로 태그 -> vim 모드에서 메세지 작성

git tag 태그명 -m '메세지' : 태그 이름과 태그 메세지 입력

<원하는 커밋에 태그 달기>
git tag (태그명) (커밋해시값) -m (태그 메세지) : 지정한 커밋에 태그를 달 수 있다

git tag -l '와일드 카드 사용' : 태그 목록을 내가 원하는 대로 필터링해서 보여줌
            ex) git tag -l 'v1.*' -> v1.으로 시작하는 태그 목록 / git tag -l '*0' -> 0으로 끝나는 태그명

<태그로 체크아웃할 커밋 지정하기>
git checkout 태그명 : 해당 태그명으로 이동

<로컬의 태그를 원격 저장소와 동기화>
git push (원격 저장소 이름) (태그명) : 특정 태그 하나를 올린다.

git push --delete (원격 저장소 이름) (태그명) : 원격 저장소에서 태그를 삭제

git push --tags : 로컬 컴퓨터의 프로젝트에 있는 태그를 한 번에 원격 저장소로 올림

<깃허브에서 파일 배포하기>
태그가 붙은 버전을 다운로드 할 수 있게 배포하는 기능

깃허브에서 tags 탭 클릭 -> ... 누르기 -> Create release -> 메세지 작성 -> publish release

* 깃허브에는 프로그램 코드뿐아니라 이미지나 글꼴 등 모든 종류의 파일을 업로드 할 수 있다.
  단, 최대 용량의 제한은 있다.
