[프로세스와 스레드]

<멀티태스킹과 멀티프로세싱>
== 멀티태스킹 ==
하나의 컴퓨터 시스템이 동시에 여러 작업을 수행하는 능력

== 멀티프로세싱 ==
컴퓨터 시스템에서 둘 이상의 프로세서(CPU 코어)를 사용하여 여러 작업을 동시에 처리하는 기술을 의미한다.
멀티프로세싱 시스템은 하나의 CPU 코어만을 사용하는 시스템보다 동시에 더 많은 작업을 처리할 수 있다.

== 멀티프로세싱 vs 멀티태스킹 ==
멀티프로세싱은 하드웨어 장비의 관점이고, 멀티태스킹은 운영체제 소프트웨어의 관점이다.
1) 멀티프로세싱
    - 여러 CPU(여러 CPU 코어)를 사용하여 동시에 여러 작업을 수행하는 것을 의미하낟.
    - 하드웨어 기반으로 성능을 향상시킨다.
    - 예: 다중 코어 프로세서를 사용하는 현대 컴퓨터 시스템
2) 멀티태스킹
    - 단일 CPU(단일 CPU 코어)가 여러 작업을 동시에 수행하는 것처럼 보이게 하는 것을 의미한다.
    - 소프트웨어 기반으로 CPU 시간을 분할하여 각 작업에 할당한다.
    - 예: 현대 운영 체제에서 여러 애플리케이션이 동시에 실행되는 환경

※참고
위 예는 여러 CPU 코어를 사용하기 때문에 멀티프로세싱이면서
동시에 각각의 단일 CPU 코어에 여러 작업을 분할해서 수행하기 때문에 멀티태스킹이다.

※참고
각 프로그램의 실행 시간을 분할해서 마치 동시에 실행되는 것 처럼 하는 기법을 시분할(Time Sharing, 시간 공유)
기법이라 한다. 이런 방식을 사용하면 CPU 코어가 하나만 있어도 여러 프로그램이 동시에 실행되는 것 처럼 느낄 수 있다.

<프로세스와 스레드>
1) 프로세스
- 프로그램은 실제 실행하기 전까지는 단순한 파일에 불과하다.
- 프로그램을 실행하면 프로세스가 만들어지고 프로그램이 실행된다.
- 이렇게 운영체제 안에서 실행중인 프로그램을 프로세스라 한다.
- 프로세스는 실행 중인 프로그램의 인스턴스이다.
- 자바 언어로 비유를 하면 클래스는 프로그램이고, 인스턴스는 프로세스이다.

프로세스는 실행 중인 프로그램의 인스턴스이다. 각 프로세스는 독립적인 메모리 공간을 갖고 있으며, 운영체제에서
별도의 작업 단위로 분리해서 관리된다. 각 프로세스는 별도의 메모리 공간을 갖고 있기 때문에 서로 간섭하지 않는다.
그리고 프로세스가 서로의 메모리에 직접 접근할 수 없다. 프로세스는 이렇듯 서로 격리되어 관리되기 때문에, 하나의
프로세스가 충돌해도 다른 프로세스에는 영향을 미치지 않는다.
쉽게 말해 특정 프로세스(프로그램)에 심각한 문제가 발생하면 해당 프로세스만 종료되고, 다른 프로세스에 영향을
주지 않는다.

== 프로세스의 메모리 구성 ==
- 코드 섹션: 실행할 프로그램의 코드가 저장되는 부분
- 데이터 섹션: 젼역 변수 및 정적 변수가 저장되는 부분
- 힙 (Heap): 동적으로 할당되는 메모리 영역
- 스택 (Stack): 메서드(함수)호출 시 생성되는 지역 변수와 반환 주소가 저장되는 영역(스레드에 포함)

2) 스레드 (Thread)
★프로세는 하나 이상의 스레드를 반드시 포함한다.

스레드는 프로세스 내에서 실행되는 작업의 단위이다. 한 프로세스 내에서 여러 스레드가 존재할 수 있으며,
이들은 프로세스가 제공하는 동일한 메모리 공간을 공유한다. 스레드는 프로세스보다 단순하므로 생성 및 관리가
단순하고 가볍다.

== 메모리 구성 ==
- 공유 메모리: 같은 프로세스의 코드 섹션, 데이터 섹션, 힙(메모리)은 프로세스 안의 모든 스레드가 공유한다.
- 개별 스택: 각 스레드는 자신의 스택을 갖고 있다.

== 프로그램이 실행된다는 것의 의미 ==
프로그램을 실행하면 운영체제는 먼저 디스크에 있는 파일 덩어리인 프로그램을 메모리로 불러오면서 프로세스를 만든다.

프로그램이 실행된다는 것은 사실 프로세스 안에 있는 코드가 한 줄씩 실행되는 것이다.

프로세스의 코드를 실행하는 흐름을 스레드(thread)라 한다. 스레드는 번역하면 '실', '실을 꿰다'라는 뜻이다.

스레드는 프로세스 내에서 실행되는 작업의 단위이다. 한 프로세스 내에 하나의 스레드가 존재할 수 있고,
여러 스레드가 존재할 수도 있다. 그리고 스레드는 프로세스가 제공하는 동일한 메모리 공간을 공유한다.

- 단일 스레드: 한 프로세스 내에 하나의 스레드만 존재
- 멀티 스레드: 한 프로세스 내에 여러 스레드가 존재

'하나의 프로세스 안에는 최소 하나의 스레드가 존재한다.' 그래야 프로그램이 실행될 수 있다.

정리하면 프로세스는 실행 환경과 자원을 제공하는 컨테이너 역할을 하고, 스레드는 CPU를 사용해서 코드를 하나하나
실행한다.

== 멀티스레드가 필요한 이유 ==
하나의 프로그램도 그 안에서 동시에 여러 작업이 필요하다.
ex) - 워드 프로그램으로 문서를 편집하면서, 문서가 자동으로 저장되고, 맞춤법 검사도 함께 수행된다.
    - 유튜브는 영상을 보는 동안, 댓글도 달 수 있다.

<스레드와 스케줄링>
★프로세스는 실행 환경과 자원을 제공하는 컨테이너 역할을 하고,
실제 CPU를 사용해서 코드를 하나하나 실행하는 것은 스레드이다.

== 단일 코어 스케줄링 ==
운영체제는 내부에 스케줄링 큐를 가지고 있고, 각각의 스레드는 스케줄링 큐에서 대기한다.

== 멀티 코어 스케줄링 ==
CPU 코어가 2개 이상이면 한 번에 더 많은 스레드를 물리적으로 진짜 동시에 실행할 수 있다.

<프로세스, 스레드와 스케줄링 - 정리>
1) 멀티태스킹과 스케줄링
- 멀티태스킹이랑 동시에 여러 작업을 수행하는 것을 말한다. 이를 위해 운영체제는 스케줄링이라는 기법을 사용한다.
  스케줄링은 CPU 시간을 여러 작업에 나누어 배분하는 방법이다.

2) 프로세스와 스레드
- 프로세스는 실행 중인 프로그램의 인스턴스이다. 각 프로세스는 독립적인 메모리 공간을 가지며, 운영체제에서 독립된
  실행 단위로 취급된다.
- 스레드는 프로세스 내에서 실행되는 작은 단위이다. 여러 스레드는 하나의 프로세스 내에서 자원을 공유하며,
  프로세스의 코드, 데이터, 시스템 자원등을 공유한다. 실제로 CPU에 의해 실행되는 단위는 스레드이다.

3) 프로세스의 역할
- 프로세스는 실행 환경을 제공한다. 여기에는 메모리 공간, 파일 핸들, 시스템 자원(네트워크 연결) 등이 포함된다.
  이는 프로세스가 컨테이너 역할을 한다는 의미이다.
- 프로세스 자체는 운영체제의 스케줄러에 의해 직접 실행되지 않으며, 프로세스 내의 스레드가 실행된다. 참고로 1개의
  프로세스 안에 하나의 스레드만 실행되는 경우도 있고, 여러 스레드가 실행되는 경우도 있다.

<컨텍스트 스위칭>
멀티태스킹이 반드시 효율적인 것 만은 아니다.

스레드 A를 멈추는 시점에 CPU 에서 사용하던 값들을 메모리에 저장해 두어야 한다.
이후에 스레드 A를 다시 실행할 때 이 값들을 CPU에 다시 불러와야 한다.

위와 같은 과정을 컨텍스트 스위칭(context switching)이라 한다.
컨텍스트는 현재 작업하는 문맥을 뜻한다. 현재 작업하는 문맥이 변하기 때문에 컨텍스트 스위칭이다.
컨텍스트 스위칭 과정에서 이전에 실행 중인 값을 메모리에 잠시 저장하고, 이후에 다시 실행하는 시점에
저장한 값을 CPU에 다시 불러와야 한다.

★결과적으로 컨텍스트 스위칭 과정에는 약간의 비용이 발생한다.

★멀티스레드는 대부분 효율적이지만, 컨텍스트 스위칭 과정이 필요하므로 항상 효율적인 것은 아니다.

※참고
실제로 컨텍스트 스위칭에 걸리는 시간은 아주 짧다. 하지만 스레드가 매우 많다면 이 비용이 커질 수 있다.

== 작업에 따른 적절한 스레드의 수 ==

1) CPU-바운드 작업 (CPU-bound tasks)
    - CPU의 연산 능력을 많이 요구하는 작업을 의미한다.
    - 이러한 작업은 주로 계산, 데이터 처리, 알고리즘 실행 등 CPU의 처리 속도가 작업 완료 시간을
      결정하는 경우다.
    - 예: 복잡한 수학 연산, 데이터 분석, 비디오 인코딩, 과학적 시뮬레이션 등
2) I/O-바운드 작업 (I/O-bound tasks)
    - 디스크, 네트워크, 파일 시스템 등과 같은 입출력(I/O) 작업을 많이 요구하는 작업을 의미한다.
    - 이러한 작업은 I/O 작업이 완료될 때까지 대기 시간이 많이 발생하며, CPU는 상대적으로 유휴(대기)
      상태에 있는 경우가 많다. 즉, 스레드가 CPU를 사용하지 않고 I/O 작업이 완료될 때 까지 대기한다.
    - 예: 데이터베이스 쿼리 처리, 파일 읽기/쓰기, 네트워크 통신, 사용자 입력 처리 등

★상황에 맞는 스레드 수 생성 방법
    CPU-바운드 작업: CPU 코어 수 + 1개
    - CPU를 거의 100% 사용하는 작업이므로 스레드를 CPU 숫자에 최적화

    I/O-바운드 작업: CPU 코어 수 보다 많은 스레드를 생성, CPU를 최대한 사용할 수 있는 숫자까지 스레드 생성
    - CPU를 많이 사용하지 않으므로 성능 테스트를 통해 CPU를 초대한 활용하는 숫자까지 스레드 생성
    - 단 너무 많은 스레드를 생성하면 컨텍스트 스위칭 비용도 함께 증가 - 적절한 성능 테스트 필요


