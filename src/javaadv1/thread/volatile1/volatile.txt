[volatile, 메모리 가시성]

<volatile, 메모리 가시성>

== 메모리 가시성 문제 ==
1) 일반적으로 생각하는 메모리 접근 방식
각각의 스레드가 사용하는 공용 변수를 메인 메모리에서 읽어 들일 것이라 기대

2) 실제 메모리 접근 방식
CPU는 처리 성능을 개선하기 위해 중간에 캐시 메모리라는 것을 사용한다.

- 메인 메모리는 CPU 입장에서 보면 거리도 멀고, 속도도 상대적으로 느리다. 대신에 상대적으로 가격이
  저렴해서 큰 용량을 쉽게 구성할 수 있다.
- CPU 연산은 매우 빠르기 때문에 CPU 연산의 빠른 성능을 따라가려면, CPU 가까이에 매우 빠른 메모리가 필요한데,
  이것이 바로 캐시 메모리이다. 캐시 메모리는 CPU와 가까이 붙어있고, 속도도 매우 빠른 메모리이다.
  하지만 상대적으로 가격이 비싸기 때문에 큰 용량을 구성하기는 어렵다.
- 현대의 CPU 대부분은 코어 단위로 캐시 메모리를 각각 보유하고 있다.
  참고로 여러 코어가 공유하는 캐시 메모리도 있다.

캐시 메모리를 메인 메모리에 반영하거나, 메인 메모리의 변경 내역을 캐시 메모리에 다시 불러오는 시기는?
이 부분은 CPU 설계 방식과 실행 환경에 따라 다를 수 있다. 즉시 반영될 수도 있고, 몇 밀리초 후, 몇초 후
극단적으로는 평생 반영되지 않을 수도 있다.

주로 컨텍스트 스위칭이 될 때, 캐시 메모리도 함께 갱신되는데, 이 부분도 환경에 따라 달라질 수 있다.
- 예: Thread.sleep()이나 콘솔에 내용을 출력할 때 스레드가 잠시 쉬는데, 이럴 때 컨텍스트 스위칭이 되면서
      주로 갱신된다. 하지만 이것이 갱신을 보장하는 것은 아니다.

== 메모리 가시성(memory visibility) ==
멀티스레드 환경에서 한 스레드가 변경한 값이 다른 스레드에서 언제 보이는지에 대한 문제를
메모리 가시성(memory visibility)이라 한다.
이름 그대로 메모리에 변경한 값이 보이는가, 보이지 않는가의 문제이다.

캐시 메모리를 사용하면 CPU 처리 성능을 개선할 수 있다. 하지만 때로는 이런 성능 향상보다는,
여러 스레드에서 같은 시점에 정확히 같은 데이터를 보는 것이 더 중요할 수 있다.
해결방은은 단순한데, 성능을 약간 포기하는 대신에, 값을 읽을 때, 값을 쓸 때 모두 메인 메모리에
직접 접근하면 된다.
자바에서는 volatile 이라는 키워드로 이런 기능을 제공한다.

여러 스레드에서 같은 값을 읽고 써야 한다면 volatile 키워드를 사용하면 된다.
단 캐시 메모리를 사용할 때 보다 성능이 느려지는 단점이 있기 때문에 꼭! 필요한 곳에만 사용하는 것이 좋다.

<자바 메모리 모델(Java Memory Model)>
== 메모리 가시성(memory visibility) ==
멀티스레드 환경에서 한 스레드가 변경한 값이 다른 스레드에서 언제 보이는지에 대한 것을
메모리 가시성(memory visibility)이라 한다. 이름 그대로 메모리에 변경한 값이 보이는가, 보이지 않는가의 문제이다.

== Java Memory Model ==
Java Memory Model(JMM)은 자바 프로그램이 어떻게 메모리에 접근하고 수정할 수 있는지를 규정하며,
특히 멀티스레드 프로그래밍에서 스레드 간의 상호작용을 정의한다. JMM 에 여러가지 내용이 있지만, 핵심은
여러 스레드들의 작업 순서를 보장하는 happens-before 관계에 대한 정의다.

== happens-before ==
happens-before 관계는 자바 메모리 모델에서 스레드 간의 작업 순서를 정의하는 개념이다.
만약 A 작업이 B 작업보다 happens-before 관계에 있다면, A 작업에서의 모든 메모리 변경 사항은 B 작업에서 볼 수 있다.
즉, A 작업에서 변경된 내용은 B 작업이 시작되기 전에 모두 메모리에 반영된다.

- happens-before 관계는 이름 그대로, 한 동작이 다른 동작보다 먼저 발생함을 보장한다.
- happens-before 관계는 스레드 간의 메모리 가시성을 보장하는 규칙이다.
- happens-before 관계가 성립하면, 한 스레드의 작업을 다른 스레드에서 볼 수 있게 된다.
- 즉, 한 스레드에서 수행한 작업을 다른 스레드가 참조할 때 최신 상태가 보장되는 것이다.

이 규칙을 따르면 프로그래머가 멀티스레드 프로그램을 작성할 때 예상치 못한 동작을 피할 수 있다.

== happens-before 관계가 발생하는 경우 ==
외우기 보다는 이런 것이 있다 정도로 읽고 넘어가자

1) 프로그램 순서 규칙
단일 스레드 내에서, 프로그램의 순서대로 작성된 모든 명령문은 happens-before 순서로 실행된다.
예: int a = 1; int b = 2; a = 1은 b = 2보다 먼저 실행된다.

2) volatile 변수 규칙
한 스레드에서 volatile 변수에 대한 쓰기 작업은 해당 변수를 읽는 모든 스레드에 보이도록 한다.
즉, volatile 변수에 대한 쓰기 작업은 그 변수를 읽는 작업보다 happens-before 관계를 형성한다.

3) 스레드 시작 규칙
한 스레드에서 Thread.start()를 호출하면, 해당 스레드 호출전의 모든 작업은 start() 호출 이후에 실행된
작업보다 happens-before 관계가 성립한다.

4) 스레드 종료 규칙
한 스레드에서 Thread.join()을 호출하면, join 대상 스레드의 모든 작업은 join()이 반환된 후의 작업보다
happens-before 관계를 가진다.

5) 인터럽트 규칙
한 스레드에서 Thread.interrupt()를 호출하는 작업이, 인터럽트된 스레드가 인터럽트를 감지하는 시점의 작업보다
happens-before 관계가 성립한다.
즉, interrupt() 호출 후, 해당 스레드의 인터럽트 상태를 확인하는 작업이 happens-before 관계에 있다.

6) 객체 생성 규칙
객체의 생성자는 객체가 완전히 생성된 후에만 다른 스레드에 의해 참조될 수 있도록 보장한다.
즉, 객체의 생성자에서 초기화된 필드는 생성자가 완료된 후 다른 스레드에서 참조될 때 happens-before 관계가 성립한다.

7) 모니터 락 규칙
한 스레드에서 synchronized 블록을 종료한 후, 그 모니터 락을 얻는 모든 스레드는 해당 블록 내의 모든 작업을
볼 수 있다. 예를 들어, synchronized(lock) {...} 블록 내에서의 작업은 블록을 나가는 시점에 happens-before
관계가 형성된다. 뿐만 아니라 ReentrantLock과 같이 락을 사용하는 경우에도 happens-before 관계가 성립한다.

8) 전이 규칙 (Transitivity Rule)
만약 A가 B보다 happens-before 관계에 있고, B가 C보다 happens-before 관계에 있다면,
A는 C보다 happens-before 관계에 있다.

* 정리
스레드 생성과 종료, 인터럽트 등은 스레드의 상태를 변경하기 때문에 어찌보면 당연하다.
그래서 쉽게 한 줄로 이야기하면 다음과 같이 정리할 수 있다.
★volatile 또는 스레드 동기화 기법(synchronized, ReentrantLock)을 사용하면 메모리 가시성의
문제가 발생하지 않는다.
