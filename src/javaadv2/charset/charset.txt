[문자 인코딩]

1비트(bit): 0, 1 두가지만 표현 가능
1바이트(byte): 1bit가 8개 총 256가지 표현 가능

<컴퓨터와 문자 인코딩1>
컴퓨터는 전구를 켜고 끄는 2진수만 알고 있다. 10진수는 정해진 수학 공식을 사용하면 쉽게
2진수로 변환할 수 있지만, 문자 A, B를 2진수로 변경하는 수학 공식 같은 것은 없다.

이를 해결하기 위해 초창기에 문자 집합을 만들고, 각 문자에 숫자를 연결시키는 방법을 생각해냈다.

- 문자 인코딩: 문자 집합을 통해 문자를 숫자로 변환하는 것
- 문자 디코딩: 문자 집합을 통해 숫자를 문자로 변환하는 것

== ASCII 문자 집합 ==
각 컴퓨터 회사가 독자적인 문자 집합을 사용한다면, 서로 다른 컴퓨터 간에 문자가 올바르게 표시되지
않는 문제가 발생할 수 있다. 이러한 호환성 문제를 해결하기 위해 ASCII 라는 표준 문자 집합이 개발되었다.
초기 컴퓨터에서는 주로 영문 알파벳, 숫자, 키보드의 특수문자, 스페이스, 엔터와 같은 기본적인 문자만
표현하면 충분했다. 따라서 7비트를 사용하여 총 128가지 문자를 표현할 수 있는 ASCII 공식 문자 집합이
만들어졌다.

== ISO_8859_1 ==
서유럽을 중심으로 컴퓨터 사용 인구가 늘어나면서, 서유럽 문자를 표현하는 문자 집합이 필요해졌다.

- 1980년도
- 기존 ASCII에 서유럽 문자의 추가 필요
- 국제 표준화 기구에서 서유럽 문자를 추가한 새로운 문자 규격을 만듦
- ISO_8859_1, LATIN1, ISO-LATIN-1 등으로 불림
    - 8bit(1byte) 문자 집합 -> 총 256가지 표현 가능
    - 기존 7비트 ASCII(0 ~ 127)를 그대로 유지
    - ASCII에 128가지 문자를 추가함(주로 서유럽 문자, 추가 특수 문자들)
- 기존 ASCII 문자 집합과 호환 가능

== 한글 문자 집합 ==
한국에도 컴퓨터 사용 인구가 늘어나면서, 한글을 표현할 수 있는 문자 집합이 필요해졌다.

1) EUC-KR
- 1980년도
- 초창기 등장한 한글 문자 집합(더 이전에 KS5601이 있었음)
- 모든 한글 보다는 자주 사용하는 한글 2350개만 포함해서 만듦
- 한글의 글자는 아주 많기 때문에 256가지만 표현할 수 있는 1byte로 표현하는 것은 불가능하다.
- 2byte(16bit)를 사용하면 총 65536가지 표현 가능
- ASCII + 자주 사용하는 한글 2350개 + 한국에서 자주 사용하는 기타 글자
    - 한국에서 자주 사용하는 한자 4888개
    - 일본어 가타카나등도 함께 포함
- ASCII는 1byte, 한글은 2byte를 사용한다.
    - 영어를 사용하면 1byte를, 한글을 사용하면 2byte를 메모리에 저장한다.
- 기존 ASCII 문자 집합과 호환 가능

2) MS949
- 1990년도
- 마이크로소프트가 EUC-KR을 확장하여 만든 인코딩
- 한글 초성, 중성, 종성 모두 조합하면 가능한 한글의 수는 총 11,172자
- EUC-KR은 쀍, 뺍 과 같이 드물게 사용하는 음절을 표현하지 못함
- 기존 EUC-KR과 호환을 이루면서 한글 11,172자를 모두 수용하도록 만든 것이 MS949
- EUC-KR과 마찬가지로 ASCII는 1byte, 한글은 2byte를 사용함
- 기존 ASCII 문자 집합과 호환 가능
- 윈도우 시스템에서 계속 사용됨

<컴퓨터와 문자 인코딩2>
== 전세계 문자 집합 ==
전세계적으로 컴퓨터 인구가 늘어나면서, 전세계 문자를 대부분 다 표현할 수 있는 문자 집합이 필요해짐

※문제
- EUC-KR 이나 MS949 같은 한글 문자표를 PC에 설치하지 않으면 다른 나라 사람들은 한글로 작성된 문서를
  열어볼 수 없다.
- 우리도 마찬가지로 히브리어, 아랍어를 보려면 각 나라의 문자표가 필요하다.
- 한 문서 안에 영어, 중국어, 일본어, 히브리어, 아랍어를 함께 저장해야 한다면?
- 1980년대 말, 다양한 문자 인코딩 표준이 존재했지만, 이들은 모두 특정 언어 또는 문자 세트를 대상으로
  했기 때문에 국제적으로 호환성 문제가 많았다.

== 유니코드의 등장 ==
- 이를 해결하기 위해 전 세계의 모든 문자들을 단일 문자 세트로 표현할 수 있는 유니코드(Unicode)
  표준이 1990년대에 도입되었다.
- 하나의 문자 세트에 전 세계 대부분의 언어를 넣어보자! 이름하여 유니코드 -> Uni(Universal)
  -> 전 세계적인 코드
- 전 세계의 모든 문자와 기호를 하나의 표준으로 통합하여 표현할 수 있는 문자 집합을 만드는 것
- UTF-16, UTF-8의 시작
- 두 표준이 비슷하게 등장, 초반에는 UTF-16이 인기

1) UTF-16
- 1990년도
- 16bit(2byte) 기반
- 자주 사용하는 기본 다국어들은 2byte로 표현, 2byte는 65536가지를 표현할 수 있다.
    - 영어, 유럽 언어, 한국어, 중국어, 일본어 등이 2byte를 사용한다.
- 그 외는 4byte로 표현 4byte는 42억 가지를 표현할 수 있다.
    - 고대 문자, 이모지, 중국어 확장 한자등

- 단점: ASCII 영문도 2byte를 사용한다. ASCII와 호환되지 않음
    - UTF-16을 사용한다면 영문의 경우 다른 문자 집합 보다 2배의 메모리를 더 사용한다.
    - 웹에 있는 문서의 80% 이상은 영문 문서이다.
    - ASCII와 호환되지 않는다는 점도 큰 단점 중 하나이다.
- 초반에는 UTF-16이 인기, 이 시기에 등장한 자바도 언어 내부적으로 문자를 표현할 때 UTF-16을 사용,
  그래서 자바의 char 타입이 2byte를 사용함
- 대부분의 문자를 2byte로 처리하기 때문에 계산이 편리함

2) UTF-8
- 1990년도
- 8bit(1byte) 기반, 가변길이 인코딩
- 1byte ~ 4byte를 사용해서 문자를 인코딩
    - 1byte: ASCII, 영문, 기본 라틴 문자
    - 2byte: 그리스어, 히브리어 라틴 확장 문자
    - 3byte: 한글, 한자, 일본어
    - 4byte: 이모지, 고대문자 등
- 단점: 상대적으로 사용이 복잡합
    - UTF-16은 대부분의 기본 문자들이 2바이트로 표현되기 때문에, 문자열의 특정 문자에 접근하거나
      문자 수를 세는 작업이 상대적으로 간단함, 반면 UTF-8에서는 각 문자가 가변 길이로 인코딩되므로
      이런 작업이 더 복잡함
- 단점: ASCII를 제외한 일부 언어에서 더 많은 용량 사용
    - UTF-8은 ASCII 문자를 1바이트로, 비 ASCII 문자를 2~4바이트로 인코딩한다.
    - 한글, 한자, 아랍어, 히브리어와 같은 문자들은 UTF-8에서 3바이트 또는 4바이트를 차지한다.
      반면, UTF-16에서는 이들 문자가 대부분 2바이트로 인코딩된다.
- 장점: ASCII 문자는 1바이트로 표현, ASCII 호환
- 현대의 사실상 표준 인코딩 기술
    - 1990년도 후반 ~ 2000년도 초반에 인터넷과 웹이 빠르게 성장하면서 저변 확대
    - 2008년 W3C 웹 표준에 UTF-8 채택
    - 현재 대부분의 웹사이트와 애플리케이션에서 기본 인코딩으로 사용

* 정리
UTF-8이 현대의 사실상 표준 인코딩 기술이 된 이유
- 저장 공간 절약과 네트워크 효율성
   UTF-8은 ASCII 문자를 포함한 많은 서양 언어의 문자에 대해 1바이트를 사용한다. 반면에
   반면에 UTF-16은 최소 2바이트를 사용하므로, 주로 ASCII 문자로 이루어진 영문 텍스트에서는 UTF-8
   이 2배 더 효율적이다. 특히 데이터를 네트워크로 전달할 때는 매우 큰 효율의 차이를 보인다. 참고로 웹에 있는
   문서의 80% 이상은 영문 문서이다.
- ASCII 와의 호환성
   UTF-8은 ASCII와 호환된다. UTF-8로 인코딩된 텍스트에서 ASCII 범위에 있는 문자는 기
   존 ASCII와 동일한 방식으로 처리된다. 예를 들어 문자 "A"는 65로 인코딩 된다. 많은 레거시 시스템은 ASCII 기
   반으로 구축되어 있다. UTF-8은 이러한 시스템과의 호환성을 유지하면서도 전 세계의 모든 문자를 표현할 수 있다.

결론: UTF-8을 사용하자

※참고
한글 윈도우의 경우 기존 윈도우와 호환성 때문에 기본 인코딩을 MS949로 유지한다.
한글 윈도우도 기본 인코딩을 UTF-8로 변경하려고 노력중이다.

※한글이 깨지는 가장 큰 2가지 이유
- EUC-KR(MS949), UTF-8이 서로 호환되지 않음
    - 한글이 깨지는 대부분의 문제는 UTF-8로 인코딩한 한글을 EUC-KR(MS949)로 디코딩하거나
      또는 EUC-KR(MS949)로 인코딩한 한글을 UTF-8로 디코딩할 때 발생한다.
- EUC-KR(MS949) 또는 UTF-8로 인코딩한 한글을 ISO-8859-1로 디코딩 할 때
    - EUC-KR(MS949) 또는 UTF-8로 인코딩한 한글을 지원하지 않는 ISO-8859-1로 디코딩할 때 발생한다.



