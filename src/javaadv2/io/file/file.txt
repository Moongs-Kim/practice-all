[File, Files]

<File>
자바에서 파일 또는 디렉토리를 다룰 때는 File 또는 Files, Path 클래스를 사용하면 된다.
이 클래스들을 사용하면 파일이나 폴더를 생성하고, 삭제하고, 또 정보를 확인할 수 있다.

File은 파일과 디렉토리를 둘 다 다룬다. 참고로 File 객체를 생성했다고 파일이나 디렉토리가 바로
만들어지는 것은 아니다. 메서드를 통해 생성해야 한다.

File과 같은 클래스들은 학습해야할 중요한 원리가 있는 것이 아니라, 다양한 기능의 모음을 제공한다.
이런 클래스의 기능들은 외우기 보다는 이런 것들이 있다 정도만 간단히 알아두고, 필요할 때 찾아서
사용하면 된다.

<Files>
자바 1.0에서 File 클래스가 등장했다. 이후에 자바 1.7에서 File 클래스를 대체할
Files와 Path가 등장했다.

== Files의 특징 ==
- 성능과 편의성이 모두 개선되었다.
- File은 과거의 호환을 유지하기 위해 남겨둔 기능이다. 이제는 Files 사용을 먼저 고려하자.
- 여기에는 수 많은 유틸리티 기능이 있다. File 클래스는 물론이고, File과 관련된 스트림
  (FileInputStream, FileWriter)의 사용을 고민하기 전에 Files에 있는 기능을 먼저 찾아보자.
  성능도 좋고, 사용하기도 더 편리하다.
- 기능이 너무 많기 때문에 주요 기능만 알아보고, 나머지는 필요할 때 검색하자.
- Files를 사용할 때 파일이나, 디렉토리의 경로는 Path 클래스를 사용해야 한다.
- Files는 직접 생성할 수 없고, static 메서드를 통해 기능을 제공한다.

<경로 표시>
파일이나 디렉토리가 있는 경로는 크게 절대 경로와 정규 경로로 나룰 수 있다.

1) 절대 경로(Absolute path)
   절대 경로는 경로의 처음부터 내가 입력한 모든 경로를 다 표현한다.

2) 정규 경로(Canonical path)
   경로의 계산이 모두 끝난 경로이다. 정규 경로는 하나만 존재한다.

   예: 절대 경로는 다음 2가지 경로가 모두 가능(아래 2가지는 모두 같은 폴더를 가리킨다)
      - /Users/yh/study/java/java-adv2
      - /Users/yh/study/java/java-adv2/temp/..

       정규 경로는 다음 하나만 가능하다.
      -  /Users/yh/study/java/java-adv2

※참고 - 상대 경로
상대 경로는 내가 위치한 곳에서 경로를 계산하는 것이다.
내가 어느 위치(디렉토리)에 있는지가 중요하다.

<Files로 문자 파일 읽기>
문자로된 파일을 읽고 쓸 때 과거에는 FileReader, FileWriter 같은 복잡한 스트림 클래스를 사용해야 했다.
거기에 모든 문자를 읽으려면 반복문을 사용해서 파일의 끝까지 읽어야 하는 과정을 추가해야 한다.
또 한 줄 단위로 파일을 읽으려면 BufferedReader와 같은 스트림 클래스를 추가해야 했다.

Files는 이런 문제를 코드 한 줄로 깔끔하게 해결해준다.
Files를 사용하면 아주 쉽게 파일에 문자를 쓰고 읽을 수 있다.

<파일 복사 최적화>
- InputStream 에는 transferTo() 라는 특별한 메서드가 있다.(자바 9)
- 이 메서드는 InputStream 에서 읽은 데이터를 바로 OutputStream 으로 출력한다.
- transferTo()는 성능 최적화가 되어 있다.
    - 상황에 따라 조금 더 느릴 수도 있다.
    - 참고로 디스크는 실행시 시간의 편차가 심하다
- 파일(read) -> 자바 -> 파일(write) 의 과정을 거친다.

transferTo() 덕분에 매우 편리하게 InputStream의 내용을 OutputStream 으로 전달할 수 있다.

== Files 사용 ==
Files.copy()
- 원래 파일(read) -> 자바 -> 파일(write) 의 과정을 거쳐야 한다.
- Files.copy()는 자바에 파일 데이터를 불러오지 않고, 운영체제의 파일 복사 기능을 사용한다.
  따라서 다음과 같이 중간 과정이 생략 된다.
  파일(read) -> 파일(write)
  따라서 가장 빠르다.


파일을 다루어야 할 일이 있다면 항상 Files의 기능을 먼저 찾아보자.
물론 Files.copy() 기능은 파일에서 파일을 복사할 때만 유용하다.
만약 파일의 정보를 읽어서 처리해야 하거나, 스트림을 통해 네트워크에 전달해야 한다면
스트림을 직접 사용해야 한다.
