[디폴트 메서드]

<디폴트 메서드가 등장한 이유>
자바 8에서 디폴트 메서드(default method)가 등장하기 전에는 인터페이스에 메서드를 새로 추가하는 순간,
이미 배포된 기존 구현 클래스들이 해당 메서드르르 구현하지 않았기 때문에 전부 컴파일 에러를 일으키게 되는
문제가 있었다.
이 때문에 특정 인터페이스를 이미 많은 클래스에서 구현하고 있는 상황에서, 인터페이스에 새 기능을 추가하려면
기존 코드를 일일이 모드 수정해야 했다.
디폴트 메서드는 이러한 문제를 해결하기 위해 등장했다. 자바 8부터는 인터페이스에서 메서드 본문을 가질 수 있도록
허용해 주어, 기존 코드를 깨뜨리지 않고 새 기능을 추가할 수 있게 되었다.

<디폴트 메서드 소개>
자바는 처음부터 인터페이스와 구현을 명확하게 분리한 언어였다.
자바가 처음 등장했을 때부터 인터페이스는 구현 없이 메서드의 시그니처만을 정의하는 용도로 사용되었다.
- 인터페이스 목적: 코드의 계약(contract)을 정의하고, 클래스가 어떤 메서드를 반드시 구현하도록 강제하여
                 명세와 구현을 분리하는 것이 주된 목적이었다.
- 엄격한 규칙: 인터페이스에 선언되는 메서드는 기본적으로 모두 추상 메서드였으며, 인터페이스 내에서 구현 내용을
             포함할 수 없었다. 오직 static final 필드와 abstract 메서드 선언만 가능했다.
- 결과: 이렇게 인터페이스가 엄격하게 구분됨으로써, 클래스는 여러 인터페이스를 구현할 수 있게 되고,
       각각의 메서드는 클래스 내부에서 구체적으로 어떻게 동작할지를 자유롭게 정의할 수 있었다.
       이를 통해 객체지향적인 설계와 다형성을 극대화할 수 있었다.

<디폴트 메서드의 올바른 사용법>
디폴트 메서드는 강력한 기능이지만, 잘못 사용하면 오히려 코드가 복잡해지고 유지보수하기 어려워질 수 있다.
다음은 디폴트 메서드를 사용할 때 고려해야 할 주요 사항이다.

1. 하위 호환성을 위해 최소한으로 사용
- 디폴트 메서드는 주로 이미 배포된 인터페이스에 새로운 메서드를 추가하면서 기존 구현체 코드를 깨뜨리지 않기
  위한 목적으로 만들어졌다.
- 새 메서드가 필요한 상황이고, 기존 구현 클래스가 많은 상황이 아니라면, 원칙적으로는 각각 구현하거나,
  또는 추상 메서드를 추가하는 것을 고려하자.
- 불필요한 디폴트 메서드 남용은 코드 복잡도를 높일 수 있다.

2. 인터페이스는 여전히 추상화의 역할
- 디폴트 메서드를 통해 인터페이스에 로직을 넣을 수 있다 하더라도, 가능한 한 로직은 구현 클래스나 별도 클래스에
  두고, 인터페이스는 계약(contract)의 역할에 충실한 것이 좋다.
- 디폴트 메서드는 어디까지나 하위 호환을 위한 기능이나, 공통으로 쓰기 쉬운 간단한 로직을 제공하는 정도가
  이상적이다.

3. 다중 상속(충돌)문제
- 하나의 클래스가 여러 인터페이스를 동시에 구현하는 상황에서, 서로 다른 인터페이스에 동일한 시그니처의
  디폴트 메서드가 존재하면 충돌이 일어난다.
- 이 경우 구현 클래스에서 반드시 메서드를 재정의해야 한다. 그리고 직접 구현 로직을 작성하거나 또는
  어떤 인터페이스의 디폴트 메서드를 쓸 것인지 명시해 주어야 한다.

4. 디폴트 메서드에 상태(state)를 두지 않기
- 인터페이스는 일반적으로 상태 없이 동작만 정의하는 추상화 계층이다.
- 인터페이스에 정의하는 디폴트 메서드도 구현을 일부 제공할 뿐, 인스턴스 변수를 활용하거나, 여러 차례 호출시
  상태에 따라 동작이 달라지는 등의 동작은 지양해야 한다.
- 이런 로직이 필요하다면 클래스(추상 클래스 등)로 옮기는 것이 더 적절하다.

※내 생각
인터페이스 또는 추상 클래스 중 어떤것을 사용해야 하는지에 대한 판단은 상태(필드, 멤버 변수)가 필요한지 아닌지 이다.
상태(필드, 멤버 변수)가 필요할때는 인터페이스 보다는 추상클래스를 사용하는게 나은거 같다.

* 정리
디폴트 메서드는 인터페이스의 확정성을 높이면서도, 기존 코드와의 하위 호환성을 보장하기 위한 자바의 주요한
언어적 지원이다. 다만 이를 활용할 때는 '인터페이스의 추상화 역할을 흐리지 않도록' 주의 깊은 설계가 필요하다.
따라서 무분별한 사용은 지양하고, 가급적 간단한 공통 기본 동작이나 이미 사용 중인 인터페이스를 확장할 때만
제한적으로 사용하는 것이 좋다.

