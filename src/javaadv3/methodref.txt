[메서드 참조]

== 메서드 참조의 장점 ==
- 메서드 참조를 사용하면 코드가 더욱 간결해지고, 가독성이 향상된다.
- 더 이상 매개변수를 명시적으로 작성할 필요가 없다. 컴파일러가 자동으로 매개변수를 매칭한다.
- 별도의 로직 분리와 함께 재사용성 역시 높아진다.

== 메서드 참조란 ==
메서드 참조는 쉽게 말해서 '이미 정의된 메서드를 그대로 참조하여 람다 표현식을 더 간결하게 작성하는 방법'이라고
할 수 있다. 예를 들어  (x, y) -> add(x, y) 라는 람다는 사실상 매개변수 x,y를 그대로 add 메서드에 전달하기만
하는 코드이므로, '클래스명::메서드명' 형태의 메서드 참조로 간단히 표현할 수 있다. 이렇게 하면 불필요한 매개변수
선언 없이 코드가 깔끔해지고, 가독성도 높아진다.

* 정리
메서드 참조는 이미 정의된 메서드를 람다로 변환하여 더욱 간결하게 사용할 수 있도록 해주는 문법적 편의 기능이다.
메서드 참조를 사용하면 이미 정의된 메서드를 장황한 람다 대신 간단하고 직관적으로 사용할 수 있다.
이처럼 '람다를 작성할 때, 이미 정의된 메서드를 그대로 호출하는 경우'라면 메서드 참조를 통해 더욱 직관적이고 간결한
코드를 작성할 수 있다.

<메서드 참조 시작>
메서드 참조(Method Reference)는 '이미 정의된 메서드를 람다처럼 간결하게 표현' 할 수 있게 해주는 문법이다.
즉, 람다 내부에서 단순히 어떤 메서드(정적/인스턴스/생성자 등)를 호출만하고 있을 경우, 다음과 같은 형태로 메서드
참조를 사용할 수 있다.

(x, y) -> 클래스명.메서드명(x, y) // 기존 람다
클래스명::메서드명 // 메서드 참조

위의 기존 람다와 메서드 참조는 동등하게 동작한다.
★쉽게 말해 메서드 참조는 람다가 단순히 어떤 메서드만 호출하는 경우, 이를 축약해주는 문법이라고 이해하면 된다.

<메서드 참조의 4가지 유형>
1. 정적 메서드 참조
2. 특정 객체의 인스턴스 메서드 참조
3. 생성자 참조
4. 임의 객체의 인스턴스 메서드 참조

1. 정적 메서드 참조
- 설명: 이름 그대로 정적(static) 메서드를 참조한다.
- 문법: 클래스명::메서드명
- 예: Math::max, Integer::parseInt 등

2. 특정 객체의 인스턴스 메서드 참조
- 설명: 이름 그대로 특정 객체의 인스턴스 메서드를 참조한다.
- 문법: 객체명::인스턴스메서드명
- 예: person::introduce, person::getName 등

3. 생성자 참조
- 설명: 이름 그대로 생성자를 참조한다.
- 문법: 클래스명::new
- 예: Person::new

4. 임의 객체의 인스턴스 메서드 참조
- 설명: 첫 번째 매개변수(또는 해당 람다가 받을 대상)가 메서드를 호출하는 객체가 된다.
- 문법: 클래스명::인스턴스메서드명
- 예: Person::introduce, 같은 람다: (Person p) -> p.introduce()

== 메서드 참조에서 ()를 사용하지 않는 이유 ==
- 메서드 참조의 문법을 잘 보면 뒤에 메서드 명 뒤에 ()가 없다.
    예를 들어서 Person::greeting()이 아니라, Person::greeting 으로 표현한다.
- ()는 메서드를 즉시 호출한다는 의미를 가진다. 여기서 ()가 없는 것은 메서드 참조를 하는 시점에는 메서드를
  호출하는게 아니라 단순히 메서드의 이름으로 해당 메서드를 참조만 한다는 뜻이다.
    해당 메서드의 실제 호출 시점은 함수형 인터페이스를 통해서 이후에 이루어진다.

== 매개변수가 있는 메서드 참조 ==
- 메서드 참조의 경우 매개변수를 생략한다. 매개변수가 여러개라면 순서대로 전달된다.

★메서드 참조에서 매개변수를 생략하는 이유
- 함수형 인터페이스의 시그니처(매개변수와 반환 타입)가 이미 정해져 있고, 컴파일러가 그 시그니처를 바탕으로
  메서드 참조와 연결해 주기 때문에 명시적으로 매개변수를 작성하지 않아도 자동으로 추론되어 호출된다.

매개변수를 포함한 메서드 호출도 메서드 참조를 사용하면 더욱 간편해진다.

<임의 객체의 인스턴스 메서드 참조>
메서드 참조는 4가지 유형이 있다.
1~3은 직관적으로 이해하는데 어려움이 없다.
하지만 '임의 객체의 인스턴스 메서드 참조'는 조금 특별하다.
따라서 1~3과는 다른 방식으로 이해해야 한다.

- 매개변수로 지정한 특정 타입의 객체에 대해 동일한 메서드를 호출
    (Person person) -> person.introduce()
    - 매개변수로 지정한 특정 타입: Person
    - 메서드: introduce()

- 특정 타입의 임의 객체의 인스턴스 메서드를 참조('매개변수로 지정한 특정 타입의 객체에 대해 동일한 메서드를 호출' 쉽게 풀어 정리)
    - 매개변수로 지정한 특정 타입: Person
    - 임의 객체: person1, person2, person3, 또는 Person 타입을 구현한 어떠한 객체든
      (Person person) -> person.introduce() 이 람다에 전달할 수 있다.
    - 인스턴스 메서드: introduce()

이렇게 특정 타입의 임의 객체에 대해 동일한 인스턴스 메서드를 호출하는 패턴을 메서드 참조로 손쉽게 표현할 수 있다.
- 람다표현: Function<Person, String> fun1 = (Person person) -> person.introduce()
- 메서드 참조(타입::인스턴스메서드): Function<Person, String> fun2 = Person::introduce

위와 같은 메서드 참조를 '특정 타입의 임의 객체의 인스턴스 참조'라 한다.
줄여서 '임의 객체의 인스턴스 참조'라 하겠다.

특정 타입: 타입은 선언시에 특정한 타입으로 고정된다.
임의 객체: 메서드를 호출할 객체가 고정되지 않는다.

- 임의 객체의 인스턴스 참조는 '클래스명::인스턴스메서드' 이다.
※주의: 왼쪽이 클래스명이고, 오른쪽이 인스턴스 메서드이다.

* 정리
1. 정적 메서드 참조 '클래스명::클래스메서드'
2. 특정 객체의 인스턴스 메서드 참조 '객체명::인스턴스메서드'
3. 생성자 참조 '클래스명::new'
4. 임의 객체의 인스턴스 메서드 참조 '클래스명::인스턴스메서드'

여기서 2번 특정 객체의 인스턴스 메서드 참조와 / 4번 임의 객체의 인스턴스 메서드 참조
이 두가지가 헷갈릴 수 있다. 참고로 두 기능은 완전히 다른 기능이다.

- 차이
1. 문법: 둘다 인스턴스 메서드를 호출하지만, 하나는 객체명을 사용하고, 하나는 클래스명을 사용한다.
- 특정 객체의 인스턴스 메서드 참조: 객체명::인스턴스메서드
- 임의 객체의 인스턴스 메서드 참조: 클래스명::인스턴스메서드

- 특정 객체의 인스턴스 메서드 참조:
선언 시점부터 이미 인스턴스가 '지정'되어 있다. 따라서 람다를 실행하는 시점에 인스턴스를 변경할 수 없다.

- 임의 객체의 인스턴스 메서드 참조
선언 시점에 호출한 인스턴스를 지정하지 않는다. 대신에 호출 대상을 매개변수로 선언해두고,
실행 시점에 호출할 인스턴스를 받는다. 실행 시점이 되어야 어떤 객체가 호출되는지 알 수 있으므로
임의 객체의 인스턴스 메서드 참조라 한다.

== 메서드 참조의 장점 ==
메서드 참조를 사용하면 람다 표현식을 더욱 직관적으로 표현할 수 있으며, 각 처리 단계에서 호출되는 메서드가
무엇인지 쉽게 파악할 수 있다. 이처럼 람다로도 충분히 표현할 수 있지만, 내부적으로 호출만 하는 간단한 람다라면
메서드 참조가 더 짧고 명확하게 표현될 수 있다. 이런 방식은 코드 가독성을 높이는 장점이 있다.

== 임의 객체의 인스턴스 메서드 참조 매개변수가 여러개 ==
BiFunction<Person, Integer, String> 이렇게 정의되어 있을 때
첫 번재 매개변수(Person)가 메서드를 호출하는 객체가 되고, 두 번째 매개변수(Integer)가
호출하는 메서드의 인자로 전달된다. 첫 번재 이후의 매개변수는 모두 순서대로 실제 인자로 전달된다.

이처럼 '임의 객체의 인스턴스 메서드 참조'는 함수형 인터페이스의 시그니처에 따라
- 첫 번째 인자를 호출 대상 객체로
- 나머지 인자들은 순서대로 해당 메서드의 매개변수로 전달된다.

<메서드 참조 최종 정리>
== 메서드 참조의 필요성 ==
- 람다에서 이미 정의된 메서드를 단순히 호출하기만 하는경우, 메서드 참조로 더 간결하게 표현 가능
- 매개변수를 생략한다.

== 람다와의 관계 ==
- 메서드 참조는 람다를 메서드 호출만으로 축약한 문법이며, 내부 동작은 사실상 동일하다.
- 람다로 표현하기에 직관적인 경우에는 람다를, 메서드 참조가 더 간결하고 읽기 쉬운 경우에는 메서드 참조를
  사용하면 된다.

메서드 참조는 자바 코드의 간결함과 가독성을 향상시켜주는 유용한 기능이므로, 여러 상황에서 적극적으로
활용하는 것을 추천한다.