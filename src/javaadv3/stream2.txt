[스트림 API]

스트림이 제공하는 다양한 스트림 생성, 중간 연산, 최종 연산을 알아본다.

<스트림 생성>
스트림은 자바 8부터 추가된 기능으로, 데이터 처리에 있어서 간결하고 효율적인 코드 작성을 가능하게 해준다.
스트림을 이용하면 컬렉션(List, Set 등)이나 배열에 저장된 요소들을 반복문 없이도 간단하게 필터링, 변환,
정렬 등의 작업을 적용할 수 있다.
특히 스트림은 중간 연산과 최종 연산을 구분하며, 지연 연산을 통해 불필요한 연산을 최소화한다.
자바 스트림은 내부적으로 파이프라인 형태를 만들어 데이터를 단계별로 처리하고, 결과를 효율적으로 반환한다.

* 정리
- 컬렉션, 배열, Stream.of은 기본적으로 유한한 데이터 소스로부터 스트림을 생성한다.
- iterate, generate는 별도의 종료 조건이 없으면 무한히 데이터를 만들어내는 스트림을 생성한다.
  따라서 필요한 만큼만(limit) 사용해야 하낟. 그렇지 않으면 무한 루프처럼 계속 스트림을 뽑아내므로 주의
  해야 한다.
- 스트림은 일반적으로 한 번 사용하면 재사용할 수 없다.(소진되면 끝). 따라서, stream()으로 얻은 스트림을
  여러 번 순회하려면, 다시 스트림을 생성해야 한다.

<중간 연산>
중간 연산(Intermediate Operation)이란, 스트림 파이프라인에서 데이터를 변환, 필터링, 정렬 등을 하는 단계이다.
- 여러 중간 연산을 연결하여 원하는 데이터를 가공할 수 있다.
- 결과가 즉시 생성되지 않고, 최종 연산이 호출될 때 한꺼번에 처리된다는 특징이 있다(지연 연산).

* 정리
- 중간 연산은 파이프라인 형태로 연결할 수 있으며, 스트림을 변경하지만 원본 데이터 자체를 바꾸지 않는다.
- 중간 연산은 lazy(지연, 게으른)하게 동작하므로, 최종 연산이 실행될 때까지 실제 처리는 일어나지 않는다.
- peek은 디버깅 목적으로 자주 사용하며, 실제 스트림의 요소값을 변경하거나 연산 결과를 반환하지는 않는다.
- takeWhile, dropWhile는 자바 9부터 추가된 기능으로, 정렬된 스트림에서 사용할 때 유용하다.
  정렬되지 않은 스트림에서 쓰면 예측하기 어렵다.

== FlatMap ==
중간 연산의 하나인 FlatMap

map은 각 요소를 하나의 값으로 변환하지만, flatMap은 각 요소를 스트림(또는 여러 요소)으로 변환한 뒤, 그 결과
를 하나의 스트림으로 평탄화(flatten)해준다.

* 정리
- flatMap은 중첩구조(컬렉션 안의 컬렉션, 배열 안의 배열 등)를 일차원으로 펼치는 데 사용된다.
- 예를 들어, 문자열 리스트들이 들어있는 리스트를 평탄화하면, 하나의 연속된 문자열 리스트로 만들 수 있다.

<Optional 간단 설명>
자바가 제공하는 Optional 클래스를 간단하게 알아본다.
옵셔녈은 추후 다시 자세하게 알아본다.

- Optional은 내부에 하나의 값(value)을 가진다.
- isPresent()를 통해 그 값(value)이 있는지 없는지 확인할 수 있다.
- get()을 통해 내부의 값을 꺼낼 수 있다. 만약 값이 없다면 예외가 발생한다.
- Optional은 이름 그대로 필수가 아니라 옵션이라는 뜻이다.
  이는 옵셔널 내부에 값(value)이 있을 수도 있고 없을 수도 있다는 뜻이다.

- Optional은 내부에 값을 담아두고, 그 값이 null 인지 아닌지를 체크할 수 있는 isPresent()와 같은 안전한
  체크 메서드를 제공한다. 따라서 안전한 체크 메서드를 통해 체크하고 난 다음에 값이 있을 때만 get()으로 값을
  꺼내는 방식으로 사용할 수 있다.
- Optional은 null 값으로 인한 오류(NullPointException)를 방지하고, 코드에서 '값이 없을 수도 있다'는
  상황을 명시적으로 표현하기 위해 사용된다. 간단히 말해, null을 직접 다루는 대신 Optional을 사용하면
  값의 유무를 안전하게 처리할 수 있어 코드가 더 명확하고 안정적으로 작성할 수 있다.

Optional은 매우 다양한 기능을 제공한다. 여기서는 스트림의 최종 연산을 이해하는데 필요한
최소한의 옵셔널 기능만 알아보았다.

<최종 연산>
최종 연산(Terminal Operation)은 스트림 파이프라인의 끝에 호출되어 실제 연산을 수행하고 결과를 만들어낸다.
최종 연산이 실행된 후에 스트림은 소모되어 더 이상 사용할 수 없다.

* 정리
- 최종 연산이 호출되면, 그 동안 정의된 모든 중간 연산이 한 번에 적용되어 결과를 만든다.
- 최종 연산을 한 번 수행하면, 스트림은 재사용할 수 없다.
- reduce를 사용할 때 초깃값을 지정하면, 스트림이 비어 있어도 초깃값이 결과가 된다. 초깃값이 없으면
  Optional을 반환한다.
  초깃값이 없는데, 스트림이 비어 있을 경우 빈 Optional(Optional.empty())을 반환한다.
- findFirst(), findAny()도 결과가 없을 수 있으므로 Optional을 통해 값 유무를 확인해야 한다.

<기본형 특화 스트림의 종류>
IntStream, LongStream, DoubleStream

- 기본형 특화 스트림(IntStream, LongStream, DoubleStream)을 이용하면 숫자 계산(합계, 평균, 최대, 최소 등)을
  간편하게 처리하고, 박싱/언박싱 오버헤드를 줄여 성능상의 이점도 얻을 수 있다.
- range(), rangeClosed() 같은 메서드를 사용하면 범위를 쉽게 다룰 수 있어 반복문 대신에 자주 쓰인다.
- mapToXxx(), boxed() 등의 메서드를 잘 활용하면 객체 스트림과 기본형 특화 스트림을 자유롭게 오가며
  다양한 작업을 할 수 있다.
- summaryStatistics()를 이요하면, 합계, 평균, 최소, 최대 등 통계 정보를 한 번에 구할 수 있어 편리하다.

기본형 특화 스트림을 잘 이용하면 가독성, 성능 모두 잡을 수 있다. 따라서 숫자 중심의 연산에서는
적극 활용하는 것을 고려하자.

<성능 - 전통적인 for문 vs 스트림 vs 기본형 특화 스트림>
- 전통적인 for 문이 보통 가장 빠르다.
- 스트림보다 전통적인 for 문이 1.5배 ~ 2배정도 빠르다.
    - 여기서 말하는 스트림은 Integer 같은 객체를 다루는 Stream을 말한다.
    - 박싱/언박싱 오버헤드가 발생한다.
- 기본형 특화 스트림(IntStream 등)은 전통적인 for 문에 가까운 성능을 보여준다.
    - 전통적인 for 문과 거의 비슷하거나 전통적인 for 문이 10% ~ 30% 정도 더 빠르다.
    - 박싱/언박싱 오버헤드를 피할 수 있다.
    - 내부적으로 최적화된 연산을 수행할 수 있다.






