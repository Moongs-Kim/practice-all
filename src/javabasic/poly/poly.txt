프로그래밍에서 다형성은 한 객체가 여러 타입의 객체로 취급될 수 있는 능력을 뜻한다.
보통 하나의 객체는 하나의 타입으로 고정되어 있다. 그런데 다형성을 사용하면 하나의 객체가 다른 타입으로
사용될 수 있단는 뜻이다.

다형성을 이해하기 위해서는 크게 2가지 핵심 이론을 알아야한다.
**
1. 다형적 참조 : 하나의 변수 타입으로 다양한 자식 인스턴스를 참조할 수 있는 기능
2. 메서드 오버라이딩 : 기존 기능을 하위 타입에서 새로운 기능으로 재정의
**

[다형적 참조]
- 부모는 자식을 품을 수 있다. -> 부모 변수가 자식 인스턴스 참조
- 반대로 자식은 부모를 담을 수 없다.
- 만약 손자가 있다면 손자도 품을 수 있다.

부모 타입의 변수가 자식 인스턴스 참조
자식 인스턴스를 만듦 -> 자식 객체 + 부모 객체 모두 생성 -> 생성된 참조값을 부모타입 변수에 대입

자바에서 부모 타입은 자신은 물론이고, 자신을 기준으로 모든 자식 타입을 참조할 수 있다.
이것이 바로 다양한 형태를 참조할 수 있다고 해서 '다형적 참조'라 한다.

<다형적 참조와 인스턴스 실행>
상속 관계는 부모 방향으로 찾아 올라갈 수는 있지만 자식 방향으로 찾아 내려갈 수는 없다.
즉 부모 타입으로 자식 인스턴스의 필드와 메서드를 사용할 수 없다. (자식의 기능을 사용할 수 없다)
사용하고 싶다면 자식 타입으로 다운캐스팅 해야한다.

<다운캐스팅>
부모 인스턴스를 자식 타입으로 다운캐스팅 불가 -> ClassCastException 컴파일 오류 발생
자식 인스턴스를 다운캐스팅 해야함
이것은 상속관계에서 생성되는 인스턴스의 메모리 구조를 떠올려보면 된다.
자식 인스턴스는 부모의 인스턴스도 내부에 가지고 있다.
하지만 부모 인스턴스는 내부에 자식 인스턴스를 가지고 있지 않다. 이상태에서 다운캐스팅하면 당연히 오류가 발생한다.

업캐스팅은 생략할 수 있다. (생략 권장)
다운캐스팅은 생략할 수 없다

다운캐스팅의 주의점
다운캐스팅은 잘못하면 심각한 런타임 오류가 발생할 수 있다.

업캐스팅이 안전하고 다운캐스팅이 위험한 이유
업캐스팅의 경우 객체를 생성하면 해당 타입의 상위 부모 타입은 모두 함께 생성된다. 따라서 위로만 타입을 변경하는
업캐스팅은 메모리 상에 인스턴스가 모두 존재하기 때문에 항상 안전하다. 따라서 캐스팅을 생략할 수 있다.
반면 다운캐스팅의 경우 인스턴스에 존재하지 않는 하위 타입으로 캐스팅하는 문제가 발생할 수 있다. 왜냐하면 객체를
생성하면 부모 타입은 보두 함께 생성되지만 자식 타입은 생성되지 않는다. 따라서 개발자가 이런 문제를 인지하고 사용해야
한다는 의미로 명시적으로 캐스팅을 해주어야 한다.

변수가 참조하는 인스턴스의 타입을 확인하고 싶다면 instanceof 키워드를 사용하면 된다.
다운캐스팅을 수행하기 전에는 먼저 instanceof를 사용해서 원하는 타입으로 변경이 가능한지 확인한 다음에
다운캐스팅을 수행하는 것이 안전하다.

instanceof는 참조하는 변수의 실제 인스턴스가 내가 원하는 인스턴스를 가지고 있는지 확인하는 것이다.
instanceof는 오른쪽 대상의 자식 타입을 왼쪽에서 참조하는 경우에도 true를 반환한다.
쉽게 이야기해서 오른쪽에 있는 타입에 왼쪽에 있는 인스턴스의 타입이 들어갈 수 있는지 대입해 보면된다.
대입이 가능하면 true, 불가능하면 false가 된다.
(인스턴스의 메모리 구조를 생각해보면 된다. 해당 인스턴스의 메모리에 내가 캐스팅할 타입의 인스턴스가 있으면 true인 것이다.)

[다형성과 메서드 오버라이딩]
**오버라이딩 된 메서드가 항상 우선권을 가진다
더 하위 자식의 오버라이딩 된 메서드가 우선권을 가진다.(손자가 있을경우 손자가 우선)