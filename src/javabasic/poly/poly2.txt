문제 상황 -> 타입이 다르다

다형성의 핵심은 다형적 참조와 메서드 오버라이딩
이 둘을 활용하면 서로 다른 타입을 같은 타입을 사용하게 만들어 각자 자신의 메서드를 호출할 수 있다.

<상속을 통해 다형성을 구현했을때 발생할 수 있는 문제점>
1. 상속 객체를 생성할 수 있다.
2. 상속 받은 객체가 부모 객체의 메서드를 오버라이딩 안할 수 있다.

- 단순히 추상화와 다형성을 사용하기 위한 객체는 상속 보다는 추상클래스나 인터페이스로 만드는 것이 낫다.

[추상]
<추상 클래스>
실제 생성되면 안되는 클래스를 추상 클래스라 한다.
추상 클래스는 이름 그대로 추상적인 개념을 제공하는 클래스이다.
따라서 실체인 인스턴스가 존재하지 않는다. 대신에 상속을 목적으로 사용되고, 부모 클래스 역할을 담당한다.
추상 클래스는 제약이 추가된 클래스일 뿐이다.

<추상 메서드>
부모 클래스를 상송 받는 자식 클래스가 반드시 오버라이딩 해야 하는 메서드를 부모 클래스에 정의할 수 있다.
- 실체가 존재하지 않고, 메서드 바디가 없다
- 추상 메서드가 하나라도 있는 클래스는 추상 클래스로 선언해야 한다.
- 추상 메서드는 상속 받는 자식 클래스가 반드시 오버라이딩 해서 사용해야 한다.
- 오버라이딩 하지 않으면 자식도 추상 클래스가 되어야 한다.

<정리>
- 추상 클래스 덕분에 실수로 추상적인 인스턴스를 생성할 문제를 근본적으로 방지해준다.
- 추상 메서드 덕분에 새로운 동물의 자식 클래스를 만들때 실수로 필수 메서드를 오버라이딩 하지 않을 문제를 근본적으로 방지해준다.

[인터페이스]
순수 추상 클래스 : 모든 메서드가 추상 메서드인 추상 클래스
순수 추상 클래스는 실행 로직을 전혀 가지고 있지 않다. 단지 다형성을 위한 부모 타입으로써 껍데기 역할만 제공할 뿐이다.

<순수 추상 클래스의 특징>
- 인스턴스를 생성할 수 없다.
- 상속시 자식은 모든 메서드를 오버라이딩 해야 한다.
- 주로 다형성을 위해 사용된다.
이런 특징을 잘 생각해보면 순수 추상 클래스는 마치 어떤 규격을 지켜서 구현해야 하는 것 처럼 느껴진다.
우리가 일반적으로 이야기하는 인터페이스와 같이 느껴진다.
이런 순수 추상 클래스의 개념은 프로그래밍에서 매우 자주 사용된다. 자바는 순수 추상 클래스를 더 편리하게
사용할 수 있도록 인터페이스라는 개념을 제공한다.

- 인터페이스의 메서드는 모두 public, abstract 이다.
- 메서드에 public abstract를 생략할 수 있다.(생략 권장)
- 인터페이스는 다중 구현(다중 상속)을 지원한다.

- 인터페이스에서 멤버 변수는 public, static, final이 모두 포함되어 있다고 간주된다.
  즉 상수로 사용된다.

<클래스, 추상 클래스, 인터페이스 모두 똑같다>
- 클래스, 추상 클래스, 인터페이스는 프로그램 코드, 메모리 구조상 모두 똑같다. 모두 자바에서는 .class로 다루어진다.
  인터페이스를 작성할 때도 .java에 인터페이스를 정의한다.
- 인터페이스는 순수 추상 클래스와 비슷하다고 생각하면 된다.
- 상속과 구현은 사람이 표현하는 단어만 다를 뿐이지 자바 입장에서는 똑같다. 일반 상속 구조와 동일하게 작동한다.

<인터페이스를 사용해야 하는 이유>
- 제약 : 순수 추상 클래스는 미래에 실행 가능한 메서드를 끼워 넣을 수 있다. 이러면 순수 추상 클래스가 아니게 된다.
인터페이스는 이러한것을 원천 차단한다.
- 다중 구현 : 모두 추상 메서드이기 때문에 가능, 구현은 여러 인터페이스 중 하나만 하면된다(공통 메서드 기준)
  두개 이상의 인터페이스에서 같은 시그니처의 메서드를 정의해도 구현은 자식 객체에서 한다. 그리고 오버라이딩에 의해
  어차피 자식 객체에 있는 메서드가 호출된다. 결과적으로 부모의 메서드를 선택하는게 아니라(클래스 다중 상속시 충돌)
  인터페이스들을 구현한 자식 객체에 있는 메서드가 사용된다. 이러한 이유로 인터페이스는 다이아몬드 문제가 발생하지 않는다.
  따라서 인터페이스의 경우 다중 구현을 허용한다.


