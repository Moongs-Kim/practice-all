[enumeration - 타입 안정성]

<enum이 필요한 이유 - 문제점 파악>
단순히 문자열을 입력하는 방식의 문제점
1. 오타가 발생하기 쉽다.
2. 유효하지 않는 값이 입력될 수 있다.

타입 안정성 부족 : 문자열은 오타가 발생하기 쉽고, 유효하지 않은 값이 입력될 수 있다.
데이터 일관성 : 예로 GOLD, gold, Gold 등 다양한 형식으로 문자열을 입력할 수 있어 일관성이 떨어진다.

-- String 사용 시 타입 안정성 부족 문제 --
값의 제한 부족 : String으로 상태나 카테고리를 표현하면, 잘못된 문자열을 실수로 입력할 가능성이 있다.
컴파일 시 오류 값지 불가 : 위와 같은 잘못된 값은 컴파일 시에 감지되지 않고, 런타임에 문제가 발견된다.
                       때문에 디버깅이 어려워질 수 있다.

이런 문제를 해결하기 위해 값을 제한하려고 해도 String은 어떤 문자열이든 받을 수 있기 때문에
String 타입을 사용해서는 문제를 해결할 수 없다.

-- 문자열 상수(static final) 사용 --
1. 코드가 명확해짐
2. 상수명 잘못 입력시 컴파일 시점에 오류 발생

그럼에도 String 타입은 어떤 문자열이든 입력할 수 있기 때문에 근본적인 문제를 해결할 수는 없다.
예로 문자열 상수를 사용하지 않고 임의의 값을 입력할 수 있기 때문이다.
또한 문자열 상수를 사용하는 사람이 문자열 상수가 어디 있는지 알기 어렵다.

<타입 안전 열거형 패턴 = Type-Safe Enum Pattern>
위와 같은 문제를 해결하기 위해 나온 결과가 '타입 안전 열거형 패턴'이다.

여기서 Enum 이란 Enumeration의 줄임말이고, 번역하면 열거라는 뜻이다.
어떤 항목을 나열하는 것을 뜻한다.

여기서 핵심은 타입 안전 열거형 패턴을 사용하면 '나열한 항목만 사용'할 수 있다는 것이다.
즉 위에서 제기된 문제점 String 처럼 아무런 문자열이나 다 사용할 수 있는 문제점을 해결할 수 있다.

-- 패턴 --
1. 클래스를 만들고 해당 클래스의 필드 값을 해당 클래스 타입의 상수 만들기
    문제점 : 해당 클래스를 직접 생성할 수 있는 문제 발생
2. private 생성자
    덕분에 해당 클래스를 생성하는 방법은 해당 클래스 내부에서만 가능하다
    이로인해 해당 클래스 내부에 정의한 상수만을 사용해야 한다.

이와 같이 진행하면 '타입 안전 열거형 패턴'을 완성할 수 있다.

-- Type-Safe Enum Pattern 장점 --
타입 안정성 향상 : 정해진 객체만 사용할 수 있기 때문에, 잘못된 값을 입력하는 문제를 근본적으로 방지 가능
데이터 일관성 : 정해진 객체만 사용하므로 데이터 일관성이 보장

Details
제한된 인스턴스 생성 : 클래스는 사전에 정의된 몇 개의 인스턴스만 생성하고,
                    외부에는 이 인스턴스들만 사용할 수 있도록 한다.
                    이를 통해 미리 정의된 값들만 사용하도록 '보장'한다.
타입 안정성 : 잘못된 값이 할당되거나 사용되는 것을 '컴파일 시점에 방지'할 수 있다.
            예를 들어, 특정 메서드가 특정 열거형 타입의 값을 요구한다면, 오직 그 타입의 인스턴스만 전달할 수 있다.

-- Type-Safe Enum Pattern 단점 --
위와 같이 패턴을 만드는것에는 단점이 있다
1. 많은 코드를 장성
2. private 생성자를 추가하는 것에 주의

<열거형 - Enum Type>
자바는 타입 안전 열거형 패턴을 매우 편리하게 사용할 수 있는 열거형(Enum Type)을 제공한다.
즉 자바에서 타입 안전 열거형 패턴을 쉽게 사용할 수 있도록 프로그래밍 언어에서 지원한다.

자바의 enum
- 타입 안정성을 제공
- 코드의 가독성 향상
- 예상 가능한 값들의 집합을 표현

* 열거형을 정의할 땐 class 대신 enum을 사용 후 원하는 상수의 이름을 나열하면 된다.
* 열거형도 클래스다. 열거형을 제공하기 위해 제약이 추가된 클래스라 생각하면 된다.
* 열거형은 자동으로 java.lang.Enum을 상속 받는다(묵시적)
* 외부에서 임의로 생성할 수 없다.(private 생성자 처럼)

※ 참고 : 열거형은 toString()을 재정의 하기 때문에 참조값을 직접 확인할 수 없다.
System.identityHashCode() : 자바가 관리하는 객체의 참조값을 숫자로 반환
Integer.toHexString() : 숫자를 16진수로 변환

※ 참고 : 열거형은 switch 문에 사용할 수 있다.

-- 열거형(ENUM)의 장점 --
타입 안정성 향상 : 열거형은 사전에 정의된 상수들로만 구성되므로, 유효하지 않은 값이 입력될 가능성이 없다.
                 이런 경우 컴파일 오류가 발생한다.
간결성 및 일관성 : 열거형을 사용하면 코드가 더 간결하고 명확해지며, 데이터 일관성이 보장된다.
확장성 : 새로운 타입(상수)을 추가하고 싶을 때, ENUM에 새로운 상수를 추가하기만 하면 된다.

※ 참고 : 열거형을 사용하는 경우 import static을 적절하게 사용하면 더 읽기 좋은 코드를 만들 수 있다.

<열거형 - 주요 메서드>
모든 열거형은 java.lang.Enum 클래스를 자동으로 상속 받는다.
따라서 해당 클래스가 제공하는 기능들을 사용할 수 있다.

values() : 모든 ENUM 상수를 포함하는 배열을 반환
valueOf(String name) : 주어진 이름과 일치하는 ENUM 상수를 반환(객체 반환 = 래퍼 클래스 valueOf과 동일)
                       잘못된 문자면 IllegalArgumentException 발생
name() : ENUM 상수의 이름을 문자열로 반환
ordinal() : ENUM 상수의 선언 순서(0부터 시작)를 반환
toString() : ENUM 상수의 이름을 문자열로 반환
             name() 메서드와 유사하지만, toString()은 직접 오버라이드 할 수 있다.

※ 주의 : ordinal()은 가급적 사용하지 않는 것이 좋다.
- 왜냐하면 중간에 상수를 선언하는 위치가 변경되면 전체 상수의 위치가 모두 변경될 수 있기 때문이다.

<열거형 정리>
- 열거형은 java.lang.Enum를 자동(강제)으로 상속 받는다.
- 열거형은 이미 java.lang.Enum을 상속 받았기 때문에 추가로 다른 클래스를 상속 받을 수 없다.
- 열거형은 인터페이스를 구현할 수 있다.
- 열거형에 추상 메서드를 선언하고, 구현할 수 있다.
    이 경우 추상 메서드를 익명 클래스와 같은 방식을 사용한다.


