[예외 처리]

※참고
자바의 경우 GC가 있기 때문에 JVM 메모리에 있는 인스턴스는 자동으로 해제할 수 있다.
하지만 외부 연결과 같은 자바 외부의 자원은 자동으로 해제가 되지 않는다.
따라서 외부 자원을 사용한 후에는 연결을 해제해서 외부 자원을 반드시 반납해야 한다.

<정상 흐름과 예외 흐름>
반환 값으로 예외를 처리하는 코드들은 정상 흐름과 예외 흐름이 전혀 분리되어 있지 않다.
어떤 부분이 정상 흐름이고 어떤 부분이 예외 흐름인지 이해하기가 어렵다

== 정상 흐름과 예외 흐름 분리 ==
반환 값을 사용해서 예외 상황을 처리하는 방식으로는 해결할 수 없다.
이런 문제를 해결하기 위해 예외 처리 메커니즘이 존재한다.
예외 처리를 사용하면 정상 흐름과 예외 흐름을 명확하게 분리할 수 있다.


<자바 예외 처리1>
자바는 프로그램 실행 중에 발생할 수 있는 예상치 못한 상황, 즉 예외(Exception)를 처리하기 위한
메커니즘을 제공한다. 이는 프로그램의 안정성과 신뢰성을 높이는 데 중요한 역할을 한다.

== 자바의 예외 처리 키워드 ==
try, catch, finally, throw, throws / 예외를 다루기 위한 예외 처리용 객체들

- 예외도 객체이다. 모든 객체의 최상위 부모는 Object 이므로 예외의 최상위 부모도 Object 이다.
- Throwable: 최상위 예외이다. 하위에 Exception과 Error 가 있다.
- Error: 메모리 부족이나 심각한 시스템 오류와 같이 애플리케이션에서 복구가 불가능한 시스템 예외이다.
         애플리케이션 개발자는 이 예외를 잡으려고 해서는 안된다.
- Exception: 체크 예외
    - 애플리케이션 로직에서 사용할 수 있는 실질적인 최상위 예외이다.
    - Exception과 그 하위 예외는 모두 컴파일러가 체크하는 체크 예외이다.
    - 단 RuntimeException은 예외로 한다.
- RuntimeException: 언체크 예외, 런타임 예외
    - 컴파일러가 체크 하지 않는 언체크 예외이다.
    - RuntimeException과 그 자식 예외는 모두 언체크 예외이다.
    - RuntimeException의 이름을 따라서 RuntimeException과 그 하위 언체크 예외를 '런타임 예외'라고 많이 부른다.

== 체크 예외 vs 언체크 예외(런타임 예외)
- 체크 예외는 발생한 예외를 개발자가 명시적으로 처리해야 한다. 그렇지 않으면 컴파일 오류가 발생한다.
  예외를 잡아서 처리하지 않으면 항상 throws 키워드를 사용해서 던지는 예외를 선언해야 한다.

- 언체크 예외는 개발자가 발생한 예외를 명시적으로 처리하지 않아도 된다.
  예외를 잡아서 처리하지 않아도 throws 키워드를 생략할 수 있다.


※주의
- 상속 관계에서 부모 타입은 자식을 담을 수 있다. 이 개념이 예외 처리에도 적용된다.
- 상위 예외를 catch로 잡으면 그 하위 예외까지 함께 잡는다.
- 따라서 애플리케이션 로직에서는 Throwable 예외를 잡으면 안되는데, 위에 작성한 잡으면 안되는 Error 예외도
  함께 잡을 수 있기 때문이다.
- 애플리케이션 로직은 이런 이유로 Exception 부터 필요한 예외로 생각하고 잡으면 된다.

<자바 예외 처리2>
예외는 폭탄 돌리기와 같다.
예외가 발생하면 잡아서 처리하거나, 처리할 수 없으면 밖으로 던져야 한다.

== 예외에 대한 2가지 기본 규칙 ==
1. 예외는 잡아서 처리하거나 밖으로 던져야 한다.
2. 예외를 잡거나 던질 때 지정한 예외뿐만 아니라 그 예외의 자식들도 함께 처리할 수 있다.
    - Exception을 catch로 잡으면 그 하위 예외들도 모두 잡을 수 있다.
    - Exception을 throws로 던지면 그 하위 예외들도 모두 던질 수 있다.
    - 예외도 객체이기 때문에 다형성이 적용된다.

※참고: 예외를 처리하지 못하고 계속 던지면?
자바 main() 밖으로 예외를 던지면 예외 로그를 출력하면서 시스템이 종료된다.

<자바 예외 처리3>
- Exception과 그 하위 예외는 모두 컴파일러가 체크하는 체크 예외이다.
  단 RuntimeException은 예외
- 체크 예외는 잡아서 처리하거나, 또는 밖으로 던지도록 선언해야 한다.
  그렇지 않으면 컴파일 오류가 발생한다.

== 예외 클래스 만들기 ==
- 예외 클래스를 만드려면 예외를 상속 받으면 된다.
- Exception을 상속받은 예외는 체크 예외가 된다.
- RuntimeException을 상속받으면 언체크 예외가 된다.


== throw / throws 차이 ==
- 'throw new 예외 | throw 예외참조값' 라고 하면 새로운 예외를 발생시킬 수 있다.
- 예외도 객체이기 때문에 객체를 먼저 new로 생성하고 예외를 발생시켜야 한다.
- 'throws 예외' 발생시킨 예외를 메서드 밖으로 던질 때 사용하는 키워드이다.


== 체크 예외의 장단점 ==
체크 예외는 예외를 잡아서 처리할 수 없을 때, 예외를 밖으로 던지는 'throws 예외'를 필수로 선언해야 한다.
그렇지 않으면 컴파일 오류가 발생한다. 이것 때문에 장점과 단점이 동시에 존재한다.
- 장점: 개발자가 실수로 예외를 누락하지 않도록 컴파일러를 통해 문제를 잡아주는 훌륭한 안전 장치이다.
       이를 통해 개발자는 어떤 체크 예외가 발생하는지 쉽게 파악할 수 있다.
- 단점: 하지만 실제로는 개발자가 모든 체크 예외를 반드시 잡거나 던지도록 처리해야 하기 때문에,
       너무 번거로운 일이된다. 크게 신경쓰고 싶지 않은 예외까지 모두 챙겨야 한다.

* 정리
체크 예외는 잡아서 직접 처리하거나 또는 밖으로 던지거나 둘중 하나를 개발자가 직접 명시적으로 처리해야한다.
그렇지 않으면 컴파일 오류가 발생한다.

<자바 예외 처리 - 언체크 예외>
- RuntimeException과 그 하위 예외는 언체크 예외로 분류 된다.
- 언체크 예외는 말 그대로 컴파일러가 예외를 체크하지 않는다는 뜻이다.
- 언체크 예외는 체크 예외와 기본적으로 동일하다.
  ★차이가 있다면 예외를 던지는 throws를 선언하지 않고, 생략할 수 있다.
  생략한 경우 자동으로 예외를 던진다.

- 언체크 예외도 필요한 경우 예외를 잡아서 처리할 수 있다.
- 언체크 예외는 체크 예외와 다르게 throws 예외를 선언하지 않아도 된다.
  말 그대로 '컴파일러가 이런 부분을 체크하지 않기 때문에 언체크 예외'이다.
- 참고로 언체크 예외도 throws 예외를 선언해도 된다. 물론 생략 가능

※참고
- 언체크 예외는 주로 생략하지만, 중요한 예외의 경우 선언해두면 해당 코드를 호출하는 개발자가
  이런 예외가 발생한다는 점을 IDE를 통해 좀 더 편리하게 인지할 수 있다.
- 언체크 예외를 던진다고 선언해도 체크 예외 처럼 컴파일러를 통해서 체크할 수 있는 것은 아니다.
  해당 메서드를 호출하는 개발자가 IDE를 통해 호출 코드를 보고, 이런 예외가 발생한다고 인지할 수 있는 정도이다.

== 언체크 예외의 장단점
언체크 예외는 예외를 잡아서 처리할 수 없을 때, 예외를 밖으로 던지는 throws 예외를 생략할 수 있다.
이것 때문에 장점과 단점이 동시에 존재한다.
- 장점: 신경쓰고 싶지 않은 언체크 예외를 무시할 수 있다. 체크 예외의 경우 처리할 수 없는 예외를 밖으로
       던지려면 항상 throws 예외를 선언해야 하지만, 언체크 예외는 이 부분을 생략할 수 있다.
- 단점: 언체크 예외는 개발자가 실수로 예외를 누락할 수 있다. 반면에 체크 예외는 컴파일러를 통해 예외 누락을 잡아준다.

* 정리
★체크 예외와 언체크 예외의 차이는 예외를 처리할 수 없을 때 예외를 밖으로 던지는 부분에 있다.
이 부분을 필수로 선언해야 하는가 생략할 수 있는가의 차이다.

