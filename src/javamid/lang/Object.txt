[Object 클래스]
자바에서 모든 클래스의 최상위 부모 클래스는 항상 Object 클래스이다.

<자바에서 Object 클래스가 최상위 부모 클래스인 이유>
- 공통 기능 제공
- 다형성의 기본 구현

    - 공통 기능 제공 -
    Object는 모든 객체에 필요한 공통 기능을 제공한다.
    Object는 최상위 부모 클래스이기 때문에 모든 객체는 공통 기능을 편리하게 상속받아 사용할 수 있다.
    - toString() : 객체의 정보를 제공
    - equals() : 객체의 같음을 비교
    - getClass() : 객체의 클래스 정보를 제공
    - 기타 여러가지 기능

    - 다형성의 기본 구현 -
    부모는 자식을 담을 수 있다. Object는 모든 클래스의 부모 클래스이다. 따라서 모든 객체를 참조할 수 있다.
    Object 클래스는 다형성을 지원하는 기본적인 메커니즘을 제공한다.

<Object를 활용한 다형성의 한계>
- Object는 모든 객체를 대상으로 다형적 참조를 할 수 있다.
  모든 객체의 부모이므로 모든 객체를 담을 수 있다.
- Object를 통해 전달 받은 객체를 호출하려면 각 객체에 맞는 다운캐스팅 과정이 필요하다
  Object가 세상의 모든 메서드를 알고 있는 것이 아니다.

  다형성을 제대로 활용하려면 '다형적 참조 + 메서드 오버라이딩'을 함께 사용해야한다.
  하지만 Object에 정의된 메서드를 제외하고 메서드 오버라이딩을 활용 할 수 없어 한계가 있다.

<Object가 없다면?>
만약 Object와 같은 개념이 없다면 모든 객체를 받을 수 있는 메서드를 만들 수 없다.

<참고 - 객체의 참조값 직접 출력>
toString()은 기본으로 객체의 참조값을 출력한다. 그런데 toString()이나 hashCode()를 재정의하면 객체의
참조값을 출력할 수 없다. 이때는 다음 코드를 사용하면 객체의 참조값을 출력할 수 있다.
String refValue = Integer.toHexString(System.identityHashCode(dog1));
 System.out.println("refValue = " + refValue);

<equals() - 1. 동일성과 동등성>
Object는 동등성 비교를 위한 equals() 메서드를 제공한다.

**자바는 두 객체가 같다라는 표현을 2가지로 분리해서 제공한다.
동일성(Identity) : == 연산자를 사용해서 두 객체의 참조가 동일한 객체를 가리키고 있는지 확인
동등성(Equality) : equals() 메서드를 사용해서 두 객체가 논리적으로 동등한지 확인

동일성 -> '물리적'으로 같은 메모리에 있는 객체 인스턴스인지 참조값을 확인하는 것
동등성 -> '논리적'으로 같은지 확인하는 것

Object가 기본으로 제공하는 equals()는 == 으로 동일성 비교를 제공한다.
따라서 동등성 비교를 사용하고 싶으면 equals() 메서드를 재정의해야 한다.
참고로 동등성 비교가 항상 필요한 것은 아니다. 동등성 비교가 필요한 경우에만 equals()를 재정의하면 된다.

Object의 나머지 메서드
- clone() : 객체를 복사할 때 사용한다. 잘 사용하지 않으므로 다루지 않는다.
- hashCode() : equals()와 hashCode()는 종종 함께 사용된다. hashCode()는 뒤에 설명
- getClass() : 뒤에 Class에서 설명
- notify(), notifyAll(), wait() : 멀티스레드용 메서드