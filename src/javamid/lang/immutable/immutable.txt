** 자바는 '항상' 값을 '복사'해서 대입한다
** 자바에서 모든 값 대입은 변수가 가지고 있는 값을 복사해서 전달한다.

- 기본형 변수는 하나의 값을 절대로 공유하지 않는다.
- 참조형 변수들은 같은 참조값을 통해 같은 인스턴스를 참조할 수 있다.
  변수가 참조값을 가지고 있으면 참조값을 복사해서 전달한다.

<공유 참조와 사이드 이펙트>
- 사이드 이펙트(Side Effect)는 프로그래밍에서 어떤 계산이 주된 작업 외에
  추가적인 부수 효과를 일으키는 것을 말한다.
- 프로그래밍에서 사이드 이펙트는 보통 부정적인 의미로 사용된다.
  사이드 이펙트는 프로그램의 특정 부분에서 발생한 변경이 의도치 않게 다른 부분에 영향을 미치는 경우에 발생한다.
  이로 인해 디버깅이 어려워지고 코드의 안정성이 저하될 수 있다.

<여러 변수가 하나의 객체를 공유하는 것을 막을 방법은 없다>
- 여러 변수들이 하나의 객체를 공유하면 예상치 못한 사이드 이펙드가 발생할 수 있다.
- 하지만 여러 변수들이 하나의 객체를 공유하는걸 막을 방법은 없다.
- 해결책이라고 한다면 여러 변수가 하나의 객체를 공유하지 않으면 된다.

객체의 공유가 꼭 필요할 때도 있지만, 때로는 공유하는 것이 사이드 이펙트를 만드는 경우도 있다.
물론 개발자가 집중하면 되기는 하지만 이런 문제를 원천 차단하는 방법이 있다면 좋다.

[불변 객체 - 도입]
공유 참조로 인해 발생하는 문제를 해결 하는 방법

<위의 사이드 이펙트의 더 근본적인 원인>
객체를 공유하는 것 자체는 문제가 아니다. 객체를 공유한다고 바로 사이드 이펙트가 발생하지는 않는다.
'문제의 직접적인 원인은 공유된 객체의 값을 변경한 것에 있다.'

객체의 상태(객체 내부의 값 -> 필드, 멤버 변수)가 변하지 않는 객체를 불변 객체(Immutable Object)라 한다.

불변 클래스를 만드는 방법은 아주 단순하다. 어떻게든 필드 값을 변경할 수 없게 클래스를 설계하면 된다.
(final, setMethod 제외 등)

<정리>
불변이라는 단순한 제약을 사용해서 사이드 이펙트라는 큰 문제를 막을 수 있다.
- 객체의 공유 참조는 막을 수 없다. 그래서 어떤 변수의 변경이 다른 곳에서 참조하는 변수의 값도 같이 변경시키는 사이드 이펙트가 발생한다.
  사이드 이펙트가 발생하면 안되는 상황이라면 불변 객체를 만들어서 사용하면 된다.
  불변 객체는 값을 변경할 수 없기 때문에 사이드 이펙트가 원천 차단된다.
- 불변 객체는 값을 변경할 수 없다. 따라서 불변 객체의 값을 변경하고 싶다면 변경하고 싶은 값으로 새로운 불변
  객체를 생성해야 한다. 이렇게 하면 기존 변수들이 참조하는 값에는 영향을 주지 않는다.

<불변 객체 - 값 변경>
불변 객체를 사용하지만 그래도 값을 변경해야 하는 메서드가 필요하면 어떻게 해야 할까?

불변 객체는 기존 값은 변경하지 않고 대신에 계산 결과를 바탕으로 새로운 객체를 만들어서 반환한다.
이렇게 하면 불변도 유지하면서 새로운 결과도 만들 수 있다.

불변 객체를 설계할 때 기존 값을 변경해야 하는 메서드가 필요할 수 있다.
이때는 기존 객체의 값을 그대로 두고 대신에 변경된 결과를 새로운 객체에 담아서 반환하면 된다.
이렇게하면 기존 값은 그대로 유지할 수 있다.

불변 객체에서 변경과 관련된 메서드들은 보통 객체를 새로 만들어서 반환하기 대문에 꼭! '반환 값을 받아야한다.'

<참고>
불변 객체에서 값을 변경하는 경우 withYear() 처럼 "with~"로 시작하는 경우가 많다.
"with"는 관례처럼 사용되는데, 원본 객체의 상태가 그대로 유지됨을 강조하면서 변경사항을 새 복사본에
포함하는 과정을 간결하게 표현한다.

<불변 객체를 알아야 하는 이유>
자바에서 가장 많이 사용되는 String 클래스가 불변 객체이다.
뿐만 아니라 자바가 기본으로 제공하는 Integer, LocalDate 등 수 많은 클래스가 불변으로 설계되어 있다.
따라서 불변 객체가 필요한 이유와 원리를 제대로 이해해야, 이런 기본 클래스들도 제대로 이해할 수 있다.

<클래스를 불변으로 설계하는 이유>
공유 참조로 인한 사이드 이펙트 말고
- 캐시 안정성
- 멀티 스레드 안정성
- 엔티티의 값 타입

지금은 불변 클래스가 어디에 사용되고, 어떻게 활용되는지 보다는 불변 클래스의 원리를 이해하는 정도면 충분하다.

<핵심 키워드 정리>
공유 참조와 사이드 이펙트
핵심은 공유 참조가 아니라 값 변경으로 인한 문제 발생
변경 불가능한 객체 필요
그래도 변경이 필요하면 새로운 객체 생성해서 반환


