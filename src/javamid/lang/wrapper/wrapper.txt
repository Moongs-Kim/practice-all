[wrapper 클래스]

기본형을 감싸서 만드는 클래스를 래퍼 클래스라 한다.
기본형을 객체로 감싸서 더 편리하게 사용하도록 도와준다.
즉 래퍼 클래스는 기본형의 객체 버전이다.

byte -> Byte
short -> Short
int -> Integer
long -> Long
float -> Float
double -> Double
char -> Character
boolean -> Boolean

<기본형의 한계>
자바는 객체 지향 언어이다. 그런데 자바 안에 객체가 아닌것이 있다.
int, double 같은 기본형이다.
기본형은 객체가 아니기 때문에 다음과 같은 한계가 있다.

- 객체가 아님 : 메서드를 제공할 수 없다.
              제네릭, 컬렉션 프레임워크를 사용할 수 없다
- null 값을 가질 수 없음 : 기본형은 항상 값이 존재해야 한다.
                        하지만 데이터가 '없음' 이라는 상태를 나타낼 필요가 있을때 사용할 수 없다.

<자바가 제공하는 기본 래퍼 클래스의 특징>
- 불변이다.
- equals로 비교해야 한다.

<래퍼 클래스 생성 - 박싱(Boxing)>
기본형을 래퍼 클래스로 변경하는 것을 마치 박스에 물건을 넣은 것 같다고 해서 박싱이라 한다.
- new Integer(10) 처럼 직접 객체를 생성하면 안된다.(디플리케이트)
  대신 Integer.valueOf(10)을 사용해서 객체를 생성하고 돌려준다.
- 추가로 Integer.valueOf() 에는 성능 최적화 기능이 있다. 개발자들이 일반적으로 자주 사용하는
  -128 ~ 127 범위의 Integer 클래스를 미리 생성해준다. 해당 범위의 값을 조회하면 미리 생성된
  Integer 객체를 반환한다. 해당 범위의 값이 없으면 new Integer()를 호출한다.
  - 마치 문자열 풀과 비슷하게 자주 사용하는 숫자를 미리 생성해두고 재사용한다.
  - 참고로 이런 최적화 방식은 미래에 더 나은 방식으로 변경될 수 있다.

<언박싱(Unboxing)>
박스에 들어있는 물건을 꺼내는 것 같다고 해서 언박싱이라 한다.
- 래퍼 클래스에 들어있는 기본형 값을 다시 꺼내는 메서드이다.
- intValue()를 사용하면된다. -> ***Value()

** 박싱 : valueOf()
   언박싱 : xxxValue()

<비교는 equals() 사용>
- 래퍼 클래스는 객체이기 때문에 == 비교를 하면 인스턴스의 참조값을 비교한다.
- 래퍼 클래스는 내부의 값을 비교하도록 equals()를 재정의 해두었다. 따라서 값을 비교하려면
  equals()를 사용해야 한다.

- 참고로 래퍼 클래스는 객체를 그대로 출력해도 내부에 있는 값을 문자로 출력하도록 toString()을 재정의했다.

<래퍼 클래스 - 오토박싱>
사용의 불편함으로 인해 자바 1.5부터 오토 박싱, 오토 언박싱을 지원한다.
이는 컴파일러가 개발자 대신 valueOf, xxxValue() 등의 코드를 추가해 주는 기능이다.
덕분에 기본형과 래퍼형을 서로 편리하게 변환할 수 있다.

<래퍼 클래스 - 주요 메서드와 성능>
valueOf() : 래퍼 타입을 반환한다. 숫자, 문자열을 모두 지원한다.
parseInt() : 문자열을 기본형으로 변환한다.
compareTo() : 내 값과 인수로 넘어온 값을 비교한다.
              내 값이 크면 1, 같으면 0, 내 값이 작으면 -1을 반환한다.
sum(), min(), max() : static 메서드이다. 간단한 덧셈, 작은 값, 큰 값 연산을 수행한다.

-- parseInt() vs valueOf()
valueOf() : 래퍼 타입을 반환한다.
parseInt() : 기본형을 반환한다.
원하는 타입에 맞는 메서드를 사용하면 된다.
parseXxx() 가 존재한다. ex) Long.parseLong()

<래퍼 클래스와 성능>
다양한 기능을 제공하는 래퍼 클래스만 있으면 될거 같지만
그래도 기본형을 제공하는 이유는 성능 때문이다.

- 기본형은 메모리에서 단순히 그 크기만큼의 공간을 차지한다. 예로 int는 4바이트
- 래퍼 클래스는 내부 필드와 자바에서 객체 자체를 다루는데 필요한 객체 메타데이터를 포함하므로
  더 많은 메모리를 사요한다. 자바 버전과 시스템마다 다르지만 대략 8~16바이트의 메모리를 추가로 사용한다.

CPU 연산을 아주 많이 수행하는 경우라면 기본형을 사용해서 최적화를 고려
그렇지 않은 일반적인 경우라면 코드를 유지보수하기 더 나은 것을 선택하면 된다.

-- 유지보수 vs 최적화 --
유지보수 vs 최적화를 고려해야 하는 상황이라면 유지보수하기 좋은 코드를 먼저 고민해야 한다.
특히 최신 컴퓨터는 매우 빠르기 때문에 메모리 상에서 발생하는 연산을 몇 번 줄인다고해도 실질적인 도움이
되지 않는 경우가 많다.

권장하는 방법은 개발 이후에 성능 테스트를 해보고 정말 문제가 되는 부분을 찾아서 최적화 하는 것이다.



