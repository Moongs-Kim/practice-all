[자바 날짜와 시간]

JDK 8(1.8) (java.time 패키지)

<LocalDate, LocalTime, LocalDateTime>
LocalDate : 날짜만 표현할 때 사용한다. 년, 월, 일을 다룬다
LocalTime : 시간만 표현할 때 사용한다. 시, 분, 초를 다룬다.
            초는 밀리초, 나노초 단위도 표함할 수 있다.
LocalDateTime : LocalDate와 LocalTime을 합한 개념이다.

* 앞에 Local(현지의, 특정 지역의)이 붙는 이유는 세계 시간대를 고려하지 않아서 타임존이
적용되지 않기 때문이다. 특정 지역의 날짜와 시간만 고려할 때 사용한다.
ex) 국내 서비스만 고려할 때, 나의 생일 등

<ZonedDateTime, OffsetDateTime>
ZonedDateTime : 시간대를 고려한 날짜와 시간을 표현할 때 사용한다.
                여기에는 시간대를 표현하는 타임존이 포함된다.
    ex) 2013-11-21T08:20:30.213+9:00[Asia/Seoul]
    - +9:00은 UTC(협정 세계시)로 부터의 시간대 차이이다. 오프셋이라 한다.
      한국은 UTC 보다 +9:00 시간이다.
    - Asia/Seoul은 타임존이라 한다. 이 타임존을 알면 오프셋과 일광 절약 시간제에 대한
      정보를 알 수 있다.
    - 일광 절약 시간제가 적용된다.
OffsetDateTime : 시간대를 고려한 날짜와 시간을 표현할 때 사용한다.
                 여기에는 타임존은 없고, UTC로 부터의 시간대 차이인 고정된 오프셋만 포함한다.
    ex) 2013-11-21T08:20:30.213+9:00
    - 일광 절약 시간제가 적용되지 않는다.

ex) Asia/Seoul, Asia/Tokyo 모두 UTC +9:00이다.
    만약 도쿄가 일광 절약 시간제를 사용한다면?
    OffsetDateTime 으로는 서울과 도쿄의 차이를 계산하기 어렵다.

※참고 : 일광 절약 시간(Daylight Saving Time, DST)

<Year, Month, YearMonth, MonthDay>
년, 월, 년월, 달일을 각각 다룰 때 사용한다. 자주 사용하지는 않는다.
DayOfWeek 와 같이 월,화,수,목,금,토,일을 나타내는 클래스도 있다.

<Instant>
Instant는 UTC(협정 세계시)를 기준으로 하는, 시간의 한 지점을 나타낸다. Instant는 날짜와 시간을 나노초 정밀도로 표현하며
1970년 1월 1일 0시 0분 0초(UTC)를 기준으로 경과한 시간으로 계산된다.
* 쉽게 말해 Instant 내부에는 초 데이터만 들어있다.(나노초 포함)
따라서 날짜와 시간을 계산에 사용할 때는 적합하지 않다.

<Period, Duration>
시간의 개념은 크게 2가지로 표현할 수 있다.
- 특정 시점의 시간(시각)
    ex) - 이 프로젝트는 2013년 8월 16일 까지 완료해야해
        - 다음 회의는 11시 30분에 진행한다.
        - 내 생일은 8월 16일이야.

- 시간의 간격(기간)
    ex) - 앞으로 4년은 더 공부해야 해
        - 이 프로젝트는 3개월 남았어
        - 라면은 3분 동안 끓어야 해

Period, Duration 은 시간의 간격(기간)을 표현하는데 사용된다.
시간의 간격은 영어로 amount of time(시간의 양)으로 불린다.

Period : 두 날짜 사이의 간격을 년, 월, 일 단위로 나타낸다.
Duration : 두 시간 사이의 간격을 시, 분, 초(나노초) 단위로 나타낸다.

<기본 날짜와 시간>
가장 기본이 되는 날짜와 시간 클래스는 LocalDate, LocalTime, LocalDateTime 이다.
- LocalDate : 날짜만 표현할 때 사용
- LocalTime : 시간만 표현할 때 사용
- LocalDateTime : LocalDate와 LocalTime 을 합한 개념

앞에 Local(현지의, 특정 지역의)이 붙는 이유는 세계 시간대를 고려하지 않아서 타임존이 적용되지 않기 때문이다.
특정 지역의 날짜와 시간만 고려할 때 사용한다.

== LocalDate ==
- 생성
now() : 현재 시간을 기준으로 생성한다.
of(...) : 특정 날짜를 기준으로 생성한다. 년,월,일을 입력할 수 있다.

- 계산
plusDays() : 특정 일을 더한다. 다양한 plusXxx() 메서드가 존재한다.

※ 주의 java.time 의 클래스는 모두 불변이다.
따라서 변경이 발생하는 경우 새로운 객체를 생성해서 반환하므로 반환값을 꼭 받아야 한다.

== LocalTime ==
- 생성
now() : 현재 시간을 기준으로 생성한다.
of(...) : 특정 시간을 기준으로 생성한다. 시,분,초,나노초를 입력할 수 있다.

- 계산
plusSeconds() : 특정 일을 더한다. 다양한 plusXxx() 메서드가 존재한다.

※ 주의 java.time 의 클래스는 모두 불변이다.
따라서 변경이 발생하는 경우 새로운 객체를 생성해서 반환하므로 반환값을 꼭 받아야 한다.

== LocalDateTime ==
- 생성
now() : 현재 시간을 기준으로 생성한다.
of(...) : 특정 시간을 기준으로 생성한다. 시,분,초,나노초를 입력할 수 있다.

- 분리
날짜(LocalDate)와 시간(LocalTime)을 toXxx() 메서드로 분리할 수 있다.

- 합체
LocalDateTime.of(localDate, localTime)
날짜와 시간을 사용해서 LocalDateTime을 만든다.

- 계산
plusXxx() : 특정 날짜와 시간을 더한다. 다양한 plusXxx() 메서드가 존재한다.

- 비교
isBefore() : 다른 날짜시간과 비교한다. 현재 날짜와 시간이 이전이라면 true를 반환한다.
isAfter() : 다른 날짜시간과 비교한다. 현재 날짜와 시간이 이후라면 true를 반환한다.
isEqual() : 다른 날짜시간과 시간적으로 동일한지 비교한다. 시간이 같으면 true를 반환한다.

isEqual() vs equals()
- isEqual()는 단순히 비교 대상이 시간적으로 같으면 true를 반환한다.
  객체가 다르고, 타임존이 달라도 시간적으로 같으면 true를 반환한다.
  시간을 계산해서 시간으로만 둘을 비교한다.
  ex) 서울의 9시와 UTC의 0시는 시간적으로 같다. 이 둘을 비교하면 true를 반환한다.
- equals() 객체의 타입, 타임존 등등 내부 데이터의 모든 구성요소가 같아야 true를 반환한다.
  ex) 서울의 9시와 UTC의 0시는 시간적으로 같다. 이 둘을 비교하면 타임존의 데이터가 다르기 때문에
      false를 반환한다.

<타임존>
"Asia/Seoul" 같은 타임존 안에는 일광 절약 시간제(DST)에 대한 정보와 UTC+9:00와 같은 UTC로 부터 시간 차이인
오프셋 정보를 모두 포함하고 있다.

== ZoneId ==
자바는 타임존을 ZoneId 클래스로 제공한다.

- ZoneId.systemDefault() : 시스템이 사용하는 기본 ZoneId를 반환한다.
                           각 PC 환경 마다 다른 결과가 나올 수 있다.
- ZoneId.of() : 타임존을 직접 제공해서 ZoneId를 반환한다.

* ZoneId는 내부에 일광 절약 시간 관련 정보, UTC와의 오프셋 정보를 포함하고 있다.

== ZonedDateTime ==
ZonedDateTime은 LocalDateTime에 시간대 정보인 ZoneId가 합쳐진 것이다.

ZonedDateTime : 시간대를 고려한 날짜와 시간을 표현할 때 사용한다.
                여기에는 시간대를 표현하는 타임존이 포함된다.

- 생성
now() : 현재 날짜와 시간을 기준으로 생성한다. 이때 ZoneId는 현재 시스템을 따른다.
        (ZonId.systemDefault() -> 현재 시스템)
of() : 특정 날짜와 시간을 기준으로 생성한다. ZoneId를 추가해야 한다.
       LocalDateTime + ZoneId 로 생성할 수 있다.

== OffsetDateTime ==
OffsetDateTime은 LocalDateTime에 UTC 오프셋 정보인 ZoneOffset이 합쳐진 것이다.

* ZoneOffset : +01:00 처럼 UTC와의 시간 차이인 오프셋 정보만 보관한다.

OffsetDateTime : 시간대를 고려한 날짜와 시간을 표현할 때 사용한다.
                 여기에는 타임존은 없고, UTC로 부터의 시간대 차이인 고정된 오프셋만 포함한다.
                 ZoneId가 없으므로 일광 절약 시간제가 적용되지 않는다.

ZonedDateTime vs OffsetDateTime
- ZonedDateTime 은 구체적인 지역 시간대를 다룰 때 사용하며, 일광 절약 시간을 자동으로 처리할 수 있다.
  사용자 지정 시간대에 따른 시간 계산이 필요할 때 적합하다.
- OffsetDateTime 은 UTC와의 시간 치이만을 나타낼 때 사용하며, 지역 시간대의 복잡성을 고려하지 않는다.
  시간대 변환 없이 로그를 기록하고, 데이터를 저장하고 처리할 때 적합하다.

<기계 중심의 시간 - Instant>
Instant는 UTC(협정 세계시)를 기준으로 하는, 시간의 한 지점을 나타낸다. Instant는 날짜와 시간을 나노초 정밀도로 표현하며
1970년 1월 1일 0시 0분 0초(UTC)를 기준으로 경과한 시간으로 계산된다.
* 쉽게 말해 Instant 내부에는 초 데이터만 들어있다.(나노초 포함)
따라서 날짜와 시간을 계산에 사용할 때는 적합하지 않다.

ex)  UTC 기준 1970년 1월 1일 0시 0분 0초라면 seconds 에 0이 들어간다.
     UTC 기준 1970년 1월 1일 0시 0분 10초라면 seconds 에 10이 들어간다.
     UTC 기준 1970년 1월 1일 0시 1분 0초라면 seconds 에 60이 들어간다

※참고 - Epoch 시간
Epoch time(에포크 시간), 또는 Unix timestamp는 컴퓨터 시스템에서 시간을 나타내는 방법 중 하나이다.
이는 1970년 1월 1일 00:00:00 UTC부터 현재까지 경과된 시간을 초 단위로 표현한 것이다.
즉, Unix 시간은 1970년 1월 1일 이후로 경과한 전체 초의 수로, 시간대에 영향을 받지 않는 절대적인 시간 표현 방식이다.
참고로 Epoch라는 뜻은 어떤 중요한 사건이 발생한 시점을 기준으로 삼는 시작점을 뜻하는 용어다.
Instant는 바로 이 Epoch 시간을 다루는 클래스이다.

Instant 특징
- 장점
    시간대 독립성: Instant는 UTC를 기준으로 하므로, 시간대에 영향을 받지 않는다. 이는 전 세계 어디서나
                 동일한 시점을 가리키는데 유용하다.
    고정된 기준점: 모든 Instant는 1970년 1월 1일 UTC를 기준으로 하기 때문에, 시간 계산 및 비교가 명확하고 일관된다.

- 단점
    사용자 친화적이지 않음: Instant는 기계적인 시간 처리에는 적합하지만, 사람이 읽고 이해하기에는 직관적이지 않다.
                        예를 들어, 날짜와 시간을 계산하고 사용하는데 필요한 기능이 부족하다.
    시간대 정보 부재: Instant에는 시간대 정보가 포함되어 있지 않아, 특정 지역의 날짜와 시간으로 변환하려면 추가적인 작업이 필요하다.

- 사용 예
    전 세계적인 시간 기준 필요 시: Instant는 UTC를 기준으로 하므로, 전 세계적으로 일관된 시점을 표현할 때 사용하기 좋다.
                               예를 들어, 로그 기록이나, 트랙잭션 타임스탬프, 서버 간의 시간 동기화 등이 이에 해당한다.
    시간대 변환 없이 시간 계산 필요 시: 시간대의 변환 없이 순수하게 시간의 흐름(예: 지속 시간 계산)만을 다루고 싶을 때
                                   Instant가 적합하다. 이는 시간대 변환의 복잡성 없이 시간 계슨을 할 수 있게 해준다.
    데이터 저장 및 교환: 데이터베이스에 시간 정보를 저장하거나, 다른 시스템과 날짜와 시간 정보를 교환할때 Instant를 사용하면,
                      모든 시스템에서 동일한 기준점(UTC)을 사용하게 되므로 데이터의 일관성을 유지하기 쉽다.

* 일반적으로 날짜와 시간을 사용할 때는 LocalDateTime, ZonedDateTime 등을 사용하면 된다.
  Instant는 날짜를 계산하기 어렵기 때문에 앞서 사용 예와 같은 특별한 경우에 한정해서 사용하면 된다.


- 생성
now(): UTC를 기준 현 시간의 Instant를 생성한다.
from(): 다른 타입의 날짜와 시간을 기준으로 Instant를 생성한다.
        침거러 Instant는 UTC를 기준으로 하기 때문에 시간대 정보가 필요하다.
        따라서 LocalDateTime은 사용할 수 없다.
ofEpochSecond(): 에포크 시간을 기준으로 Instant를 생성한다. 0초를 선택하면 에포크 시간인
                 1970년 1월 1일 0시 0분 0초로 생성된다.

- 계산
plusSeconds(): 초를 더한다. 초, 밀리초, 나노초 정도만 더하는 간단한 메서드가 제공된다.

- 조회
getEpochSecond(): 에포크 시간인 UTC 1970년 1월 1일 0시 0분 0초를 기준으로 흐른 초를 반환한다.

* Instant 정리
- 조금 특별한 시간, 기계 중심, UTC 기준
- 에포크 시간으로부터 흐른 시간을 초 단위로 저장
- 전세계 모든 서버 시간을 똑같이 맞출 수 있음, 항상 UTC 기준이므로 한국에 있는 Instant,
  미국에 있는 Instant의 시간이 똑같음
- 서버 로그, epoch 시간 기반 계산이 필요할 때, 간단히 두 시간의 차이를 구할 때
- 단점: 초 단위의 간단한 연산 가능, 복잡한 연산 못함
- 대안: 날짜 계산 필요하면 LocalDateTime 또는, ZonedDateTime 사용

<기간, 시간의 간격 - Period, Duration>
시간의 개념은 크게 2가지로 표현할 수 있다.
- 특정 시점의 시간(시각)
    ex) - 이 프로젝트는 2013년 8월 16일 까지 완료해야해
        - 다음 회의는 11시 30분에 진행한다.
        - 내 생일은 8월 16일이야.

- 시간의 간격(기간)
    ex) - 앞으로 4년은 더 공부해야 해
        - 이 프로젝트는 3개월 남았어
        - 라면은 3분 동안 끓어야 해

Period, Duration 은 시간의 간격(기간)을 표현하는데 사용된다.
시간의 간격은 영어로 amount of time(시간의 양)으로 불린다.

== Period ==
두 날짜 사이의 간격을 년,월,일 단위로 나타낸다.

- 생성
of(): 특정 기간을 지정해서 Period를 생성한다.
    of(년,월,일)
    ofDays()
    ofMonths()
    ofYears()

- 계산에 사용
'2030년 1월 1일에 10을 더하면 2030년 1월 11일이 된다' 라고 표현할 때 특정 날짜에 10일이라는 기간을
더 할 수 있다.

- 기간 차이
'2023년 1월 1일과 2023년 4월 2일간의 차이는 3개월 1일이다' 라고 표현할 때 특정 날짜의 차이를 구하면
기간이 된다.
Period.between(startDate, endDate)와 같이 특정 날짜의 차이를 구하면 Period가 반환된다.

== Duration ==
두 시간 사이의 간격을 시,분,초(나노초) 단위로 나타낸다.

내부에서 초를 기반으로 시,분,초를 계산해서 사용한다.
ex) 1분 = 60초
    1시간 = 3600초

- 생성
of(): 특정 시간을 지정해서 Duration를 생성한다.
    of(지정)
    ofSeconds()
    ofMinutes()
    ofHours()

- 계산에 사용
'1:00에 30분을 더하면 1:30이 된다' 라고 표현할 때 특정 시간에 30분이라는 시간(시간의 간격)을 더할 수 있다.

- 시간 차이
9시와 10시의 차이는 1시간이라고 표현할 때 시간의 차이를 구할 수 있다.
Duration.between(start, end)와 같이 특정 시간의 차이를 구하면 Duration이 반환된다.












