[Comparable, Comparator]

<비교자 - Comparator>
Comparator 인터페이스

public interface Comparator<T> {
    int compare(T o1, T o2);
}

두 값을 비교할 때 비교 기준을 만들 때 사용한다.

두 인수를 비교해서 결과 값을 반환하면 된다.
- 첫 번째 인수가 더 작으면 음수, 예(-1)
- 두 값이 같으면 0
- 첫 번째 인수가 더 크면 양수, 예(1)

Arrays.sort()를 사용할 때 비교자(Comparator)를 넘겨주면 알고리즘에서 어떤 값이 더 큰지
두 값을 비교할 때, 비교자를 사용한다.

※참고 - (-1) 을 곱하는 이유
return ((o1 < o2) ? -1 : ((o1 == o2) ? 0 : 1)) * -1;

마지막에 -1을 곱하면 양수는 음수로, 음수는 양수로 반환된다.
즉, 계산의 결과가 반대로 된다. 따라서 정렬의 결과도 반대가 된다.

<정렬 - Comparable, Comparator>
자바가 기본으로 제공하는 Integer, String 같은 객체를 제외하고 MyUser와 같이 직접 만든 객체를
정렬하려면 어떻게 해야 할까?
내가 만든 두 객체 중에 어떤 객체가 더 큰지 알려줄 방법이 있어야 한다.

★이때는 Comparable 인터페이스를 구현하면 된다.
이 인터페이스는 이름 그대로 비교 가능한, 비교할 수 있는 이라는 뜻으로, 객체에 비교 기능을 추가해 준다.

Comparable 인터페이스
public interface Comparable<T> {
    public int compareTo(T o);
}

자기 자신과 인수로 넘어온 객체를 비교해서 반환하면 된다.
- 현재 객체가 인수로 주어진 객체보다 더 작으면 음수, 예(-1)
- 두 객체의 크기가 같으면 0
- 현재 객체가 인수로 주어진 객체보다 더 크면 양수, 예(1)

※참고
Comparable을 통해 구현한 순서를 자연 순서(Natural Ordering)라 한다.

==  Arrays.sort(array) ==
기본 정렬을 시도한다. 이때는 객체가 스스로 가지고 있는 Comparable 인터페이스를 사용해서 비교한다.
Comparable 인터페이스 사용 했다는 것은 자연적인 순서를 하용했다는 것이다.

ex) MyUser가 구현(Comparable)한 대로 나이(age) 기준 오름차순으로 정렬했다.
    MyUser의 자연적인 순서를 사용했다.

== 다른 방식으로 정렬 ==
객체가 가지고 있는 Comparable 기본 정렬이 아니라 다른 정렬을 사용하고 싶다면?

==  Arrays.sort(array, Comparator) ==
기본 정렬이 아니라 정렬 방식을 지정하고 싶다면 Arrays.sort의 인수로 비교자(Comparator)를 만들어서
넘겨 주면 된다. 이렇게 비교자를 따로 전달하면 객체가 기본으로 가지고 있는 Comparable을 무시하고,
별도로 전달한 비교자를 사용해서 정렬한다.

※주의!
만약 Comparable도 구현하지 않고, Comparator도 제공하지 않으면 런타임 오류가 발생한다.
java.lang.ClassCastException: class collection.compare.MyUser cannot be cast
to class java.lang.Comparable

Comparator가 없으니, 객체가 가지고 있는 기본 정렬을 사용해야 한다. 이때 Comparable을 사용한다.
그런데 Comparable을 찾는데 없으니, 예외가 발생한다.

== Comparable, Comparator 정리 ==
- 객체의 기본 정렬 방법은 객체에 Comparable를 구현해서 정의한다. 이렇게 하면 객체는 이름 그대로
  비교할 수 있는 객체가 되고 기본 정렬 방법을 가진다.
- 그런데 기본 정렬 외에 다른 정렬 방법을 사요해야 하는 경우 비교자(Comparator)를 별도로 구현해서
  정렬 메서드에 전달하면 된다.
- 이 경우 전달한 Comparator가 항상 우선권을 가진다.
- 자바가 제공하는 Integer, String 같은 기본 객체들은 대부분 Comparable을 구현해 두었다.

Comparator 인터페이스

public interface Comparator<T> {
    int compare(T o1, T o2);     <- 두 개의 값을 전달받아 비교
}

Comparable 인터페이스
public interface Comparable<T> {
    public int compareTo(T o);   <- 본인이 가지고 있는 값과 외부에서 전달된 값 하나 비교
}

<정렬2 - Comparable, Comparator>

== Collections.sort(list) ==
- 리스트는 순서가 있는 컬렉션이므로 정렬할 수 있다.
- 위 메서드를 사용하면 기본 정렬이 적용된다.
- 하지만 이 방식보다는 객체 스스로 정렬 메서드를 가지고 있는 list.sort() 사용을 더 권장한다.
  참고로 둘의 결과는 같다.

==  list.sort(null) ==
- 별도의 비교자가 없으므로 Comparable로 비교해서 정렬한다.
- 자연적인 순서로 비교한다.
- 자바 1.8부터 사용

== Collections.sort(list, new IdComparator()) ==
- 별도의 비교자로 비교하고 싶다면 다음 인자에 비교자를 넘기면 된다.
- 하지만 이 방식보다는 객체 스스로 정렬 메서드를 가지고 있는 list.sort() 사용을 더 권장한다.
  참고로 둘의 결과는 같다.

== list.sort(new IdComparator()) ==
- 전달한 비교자로 비교한다.
- 자바 1.8부터 사용

<Tree 구조와 정렬>
★TreeSet과 같은 이진 탐색 트리 구조는 데이터를 보관할 때, 데이터를 정렬하면서 보관한다.
  따라서 정렬 기준을 제공하는 것이 필수다.

★이진 탐색 트리는 데이터를 저장할 때 왼쪽 노드에 저장해야 할 지, 오른쪽 노드에 저장해야 할 지
  비교가 필요하다. 따라서 TreeSet, TreeMap은 Comparable 또는 Comparator가 필수이다.

- TreeSet을 생성할 때 별도의 비교자를 제공하지 않으면 객체가 구현한 Comparable을 사용한다.
- TreeSet을 생성할 때 별도의 비교자를 제공하면 Comparable 대신 비교자(Comparator)를 사용해서
  정렬한다.

※주의!
만약 Comparable도 구현하지 않고, Comparator도 제공하지 않으면 런타임 오류가 발생한다.
 java.lang.ClassCastException: class collection.compare.MyUser cannot be cast
to class java.lang.Comparable

* 정리
- 자바의 정렬 알고리즘은 매우 복잡하고, 또 거의 완성형에 가깝다.
  자바는 개발자가 복잡한 정렬 알고리즘은 신경 쓰지 않으면서 정렬의 기준만 간단히 변경할 수 있도록,
  정렬의 기준을 Comparable, Comparator 인터페이스를 통해 추상화해 두었다.
- 객체의 정렬이 필요한 경우 Comparable을 통해 기본 자연 순서를 제공하자.
  자연 순서 외에 다른 정렬 기준이 추가로 필요하면 Comparator를 제공하자.



