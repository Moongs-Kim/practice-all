[Stack and Queue]

<스택 자료 구조>

== 후입 선출(LIFO, Last In First Out) ==
- 나중에 넣은 것이 가장 먼저 나오는 것을 후입 선출이라 하고, 이런 자료 구조를 스택이라 한다.

- 전통적으로 스택에 값을 넣는 것을 push라 한다.
  스택에서 값을 꺼내는 것을 pop 이라 한다.

※주의! - Stack 클래스는 사용하지 말자
- 자바의 Stack 클래스는 내부에서 Vector 라는 자료 구조를 사용한다. 이 자료 구조는 자바 1.0에
  개발되었는데, 지금은 사용되지 않고 하위 호환을 위해 존재한다.
- 지금은 더 빠르고 좋은 자료 구조가 많다. 따라서 Vector를 사용하는 Stack도 사용하지 않는 것을
  권장한다. 대신 Deque를 사용하는 것이 좋다.

<큐 자료 구조>
== 선입 선출(FIFO, First In First Out) ==
후입 선출과 반대로 가장 먼저 넣은 것이 가장 먼저 나오는 것을 선입 선출이라 한다.
이런 자료 구조를 큐(Queue)라 한다.

- 전통적으로 큐에 값을 넣는 것을 offer라 하고,
  큐에서 값을 꺼내는 것을 poll 이라 한다.

== 컬렉션 프레임워크 - Queue ==
Collection(interface) <- Queue(interface) <- Deque(interface) <- ArrayDeque, LinkedList

- Queue 인터페이스는 List, Set과 같이 Collection의 자식이다.
- Queue의 대표적인 구현체는 ArrayDeque, LinkedList가 있다.

참고로 LinkedList는 Deque와 List 인터페이스를 모두 구현한다.

<Deque 자료 구조>
- Deque는 'Double Ended Queue'의 약자로, 이름에서 알 수 있듯이, Deque는 양쪽 끝에서 요소를 추가하거나
  제거할 수 있다.
- Deque는 일반적인 큐(Queue)와 스택(Stack)의 기능을 모두 포함하고 있어, 매우 유연한 자료 구조이다.
- 데크, 덱 등으로 부른다.

- offerFirst(): 앞에 추가한다.
- offerLast(): 뒤에 추가한다.
- pollFirst(): 앞에서 꺼낸다.
- pollLast(): 뒤에서 꺼낸다.

<Deque 구현체와 성능 테스트>
- Deque의 대표적인 구현체는 ArrayDeque, LinkedList가 있다.
- 이 둘 중에 ArrayDeque가 모든 면에서 더 빠르다.

- 둘의 차이는 ArrayList vs LinkedList의 차이와 비슷한데, 작동 원리가 하나는 배열을 하나는
  동적 노드 링크를 사용하기 때문이다.
- ArrayDeque는 추가로 특별한 원형 큐 자료 구조를 사용하는데, 덕분에 앞, 뒤 입력 모두 O(1)의 성능을 제공한다.
  물론 LinkedList도 앞 뒤 입력 모두 O(1)의 성능을 제공한다.
- 이론적으로 LinkedList가 삽입 삭제가 자주 발생할 때 더 효율적일 수 있지만, 현대 컴퓨터 시스템의 메모리 접근 패턴,
  CPU 캐시 최적화 등을 고려할 때 배열을 사용하는 ArrayDeque가 실제 사용 환경에서 더 나은 성능을
  보여주는 경우가 많다.

※참고
원형 큐에 대한 이론적인 내용은 다루지 않는다.

<Deque와 Stack, Queue>
Deque는 양쪽으로 데이터를 입력하고 출력할 수 있으므로, 스택과 큐의 역할을 모두 수행할 수 있다.
Deque를 Stack과 Queue로 사용하기 위한 메서드 이름까지 제공한다.

- Deque - Stack: push(), pop()

  Deque 에서 Stack을 위한 메서드 이름까지 제공한다. 자바의 Stack 클래스는 성능이 좋지 않고
  하위 호환을 위해서 남겨져 있다. Stack 자료 구조가 필요하면 Deque에 ArrayDeque 구현체를 사용하자

- Deque - Queue: offer(), poll()

  Deque 에서 Queue을 위한 메서드 이름까지 제공한다. Deque 인터페이스는 Queue 인터페이스의 자식이기 때문에,
  단순히 Queue의 기능만 필요하면 Queue 인터페이스를 사용하고, 더 많은 기능이 필요하다면
  Deque 인터페이스를 사용하면 된다. 그리고 구현체로 성능이 빠른 ArrayDeque를 사용하자.






