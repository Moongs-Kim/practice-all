[Iterable, Iterator]

<순회1 - Iterable, Iterator>
순회라는 단어는 여러 곳을 돌아다닌다는 뜻이다.
자료 구조에 순회는 자료 구조에 들어있는 데이터를 차례대로 접근해서 처리하는 것을 순회라 한다.
그런데 다양한 자료 구조가 있고, 각각의 자료 구조마다 데이터를 접근하는 방법이 모두 다르다.

배열 리스트, 연결리스트, 해시 셋, 연결 해시 셋, 트리 셋 등등 다양한 자료 구조가 있다.
각각의 자료 구조마다 순회하는 방법이 서로 다르기 때문에 각 자료 구조의 순회 방법을 배워야 한다.
그리고 순회 방법을 배우려면 자료 구조의 내부 구조도 알아야 한다.
결과적으로 너무 많은 내용을 알아야 하는 것이다. 하지만 자료 구조를 사용하는 개발자 입장에서 보면
단순히 자료 구조에 들어있는 모든 데이터에 순서대로 접근해서 출력하거나 계산하고 싶을 뿐이다.

자료 구조의 구현과 관계 없이 모든 자료 구조를 동일한 방법으로 순회할 수 있는 일관성 있는 방법이 있다면,
자료 구조를 사용하는 개발자 입장에서 매우 편리할 것이다.

자바는 이런 문제를 해결하기 위해 Iterable, Iterator 인터페이스를 제공한다.

Iterable: '반복 가능한'이라는 뜻이다.
Iterator: '반복자'라는 뜻이다.

== Iterable, Iterator 인터페이스의 구조 ==

- Iterable 인터페이스의 주요 메서드
public interface Iterable<T> {
    Iterator<T> iterator();
}

단순히 Iterator 반복자를 반환한다.

- Iterator 인터페이스의 주요 메서드
public interface Iterator<E> {
    boolean hasNext();
    E next();
}

hasNext(): 다음 요소가 있는지 확인한다. 다음 요소가 없으면 false를 반환한다.
next(): 다음 요소를 반환한다. 내부에 있는 위치를 다음으로 이동한다.

자료 구조에 들어있는 데이터를 처음부터 끝까지 순회하는 방법은 단순하다. 자료 구조에 다음 요소가
있는지 물어보고, 있으면 다음 요소를 꺼내는 과정을 반복하면 된다.
만약 다음 요소가 없다면 종료하면 된다. 이렇게 하면 자료 구조에 있는 모든 데이터를 순회할 수 있다.


== Iterable, Iterator 사용 법 ==
* Iterator는 단독으로 사용할 수 없다. Iterable을 통해 순회의 대상이 되는 자료 구조가 필요하다.

- 어떤 자료 구조를 가지는 클래스에 Iterator 인터페이스를 구현한다.
  이 인터페이스에 정의된 메서드를 자료 구조에 맞게 순회 로직을 오버라이딩한다.

- 자료 구조에 Iterable 인터페이스를 구현한다.
  이 인터페이스에 정의된 메서드를 오버라이딩 한다.
  Iterator를 반환 하므로 Iterator를 구현한 클래스를 생성해 반환하면 된다.

== 클래스 구조 ==
    Iterable  ->  Iterator
      ↑             ↑
    MyArray  -> MyArrayIterator

- MyArray는 Iterable(반복할 수 있는) 인터페이스를 구현한다.
- Iterable 인터페이스를 구현하면 iterator() 메서드를 구현해야 한다.
  이 메서드는 Iterator 인터페이스를 구현한 반복자(MyArrayIterator)를 반환한다.


<순회2 - 향상된 for문>
== Iterable과 향상된 for문(Enhanced For Loop) ==
for-each 문으로 불리는 향상된 for 문은 자료 구조를 순회하는 것이 목적이다.

★자바는 Iterable 인터페이스를 구현한 객체에 대해서 향상된 for 문을 사용할 수 있게 해준다.
for (int value : myArray) {
    System.out.println("value = " + value);
}
    자바는 컴파일 시점에 다음과 같이 코드를 변경한다.
                ↓↓↓

while (iterator.hasNext()) {
    Integer value = iterator.next();
    System.out.println("value = " + value);
}

따라서 위의 두 코드는 같은 코드이다. 물론 모든 데이터를 순회한다면 둘 중에 깔끔한
향상된 for 문을 사용하는 것이 좋다.

* 정리
★만드는 사람이 수고로우면 쓰는 사람이 편하고, 만드는 사람이 편하면 쓰는 사람이 수고롭다.

자료 구조가 아무리 복잡해도 Iterable, Iterator을 구현하면 해당 자료 구조를 사용하는 개발자는
동일한 방법으로 매우 쉽게 자료 구조를 순회할 수 있다.
이것이 인터페이스가 주는 큰 장점이다.

<순회3 - 자바가 제공하는 Iterable, Iterator>
- 자바는 컬렉션 프레임워크를 사용하는 개발자가 편리하고 일관된 방법으로 자료 구조를 순회할 수 있도록
  Iterable 인터페이스를 제공하고, 이미 각각의 구현체에 맞는 Iterator도 다 구현해 두었다.
- 자바 Collection 인터페이스의 상위에 Iterable이 있다는 것은 모든 컬렉션을 Iterable과
  Iterator를 사용해서 순회할 수 있다는 뜻이다.
- Map의 경우 Key 뿐만 아니라 Value 까지 있기 때문에 바로 순회를 할 수는 없다.
  대신 Key나 Value를 정해서 순회를 할 수 있는데, keySet(), values()를 호출하면 Set, Collection을
  반환하기 때문에 Key나 Value를 정해서 순회를 할 수 있다.
  물론 Entry를 Set 구조로 반환하는 entrySet()도 순회가 가능하다.

* 정리
자바가 제공하는 컬렉션 프레임워크의 모든 자료 구조는 Iterable, Iterator를 사용해서 편리하고
일관된 방법으로 순회를 할 수 있다.
그리고 Iterable을 구현하기 때문에 향상된 for 문도 사용할 수 있다.

※참고
- Iterable, Iterator은 인터페이스이다. 따라서 다형성을 적극 활용할 수 있다.
- java.util.ArrayList$Itr: ArrayList의 Iterator는 ArrayList의 중첩 클래스이다.
- java.util.HashMap$KeyIterator: HashSet 자료 구조는 사실 내부에서 HashMap 자료 구조를 사용한다.
                                 HashMap 자료 구조에서 Value를 사용하지 않으면 HashSet과 같다.

※참고 - Iterator(반복자) 디자인 패턴★
- 객체 지향 프로그래밍에서 컬렉션의 요소들을 순회할 때 사용되는 디자인 패턴이다.
- 이 패턴은 컬렉션의 내부 표현 방식을 노출시키지 않으면서도 그 안의 각 요소에 순차적으로
  접근할 수 있게 해준다.
- Iterator 패턴은 컬렉션의 구현과는 독립적으로 요소들을 탐색할 수 있는 방법을 제공하며,
  이로 인해 코드의 복잡성을 줄이고 재사용성을 높일 수 있다.

