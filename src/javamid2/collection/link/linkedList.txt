[LinkedList]

<배열 리스트의 단점>
배열 리스트는 내부에 배열을 사용해서 데이터를 보관하고 관리한다.

배열 리스트의 단점
1. 배열의 사용하지 않는 공간 낭비
   배열은 필요한 배열의 크기를 미리 확보해야 한다.
   데이터가 얼마나 추가될지 예측할 수 없는 경우 나머지 공간은 사용되지 않고 낭비된다.
2. 배열의 중간에 데이터 추가
   배열의 앞이나 중간에 데이터를 추가하면 추가할 데이터의 공간을 확보하기 위해
   기존 데이터들을 오른쪽으로 이동해야 한다.
   삭제의 경우에는 빈 공간을 채우기 위해 왼쪽으로 이동해야 한다.
   앞이나 중간에 데이터를 추가하거나 삭제하는 경우 많은 데이터를 이동해야 하기 때문에
   성능이 좋지 않다.

<노드와 연결>
낭비되는 메모리 없이 딱 필요한 만큼만 메모리를 확보해서 사용하고, 또 앞이나 중간에
데이터를 추가하거나 삭제할 때도 효율적인 자료 구조가 있는데, 바로 노드를 만들고
각 노드를 서로 연결하는 방식이다.

* ★정리
- 노드는 내부에 데이터와 다음 노드에 대한 참조를 가지고 있다.
- 지금까지 설명한 구조는 각각의 노드가 참조를 통해 연결(Link, 링크) 되어 있다.
- 데이터를 추가할 때 동적으로 필요한 만큼의 노드만 만들어서 연결하면 된다.
  따라서 배열과 다르게 메모리를 낭비하지 않는다.
- 각각의 노드를 연결(링크)해서 사용하는 자료 구조로 리스트를 만들 수 있는데, 이것을
  연결 리스트라 한다.

<직접 구현하는 연결 리스트1>
참고로 링크드 리스트, 연결 리스트 용어를 둘다 사용한다.

★연결 리스트는 배열 리스트의 단점인, 메모리 낭비, 중간 위치의 데이터 추가에 대한 성능 문제를
  어느정도 극복할 수 있다.

- 리스트 자료 구조: 순서가 있고, 중복을 허용하는 자료 구조

배열 리스트, 연결 리스트 모두 같은 리스트이다.
리스트의 내부에서 배열을 사용하는가 아니면 노드와 연결 구조를 사용하는가의 차이가 있을 뿐이다.
둘다 순서가 있고, 중복을 허용하는 자료 구조이다.

연결 리스트는 데이터를 추가할 때 마다 동적으로 노드가 늘어나기 때문에 범위를 초과하는 문제는
발생하지 않는다.

== 연결 리스트와 빅오 ==
1. 조회: Object get(int index)
    - 특정 위치에 있는 데이터를 반환
    - 특정 위치의 노드를 찾는데 O(n)이 걸린다.
    - 연결 리스트에서 사용하는 노드들은 배열이 아니다. 단지 다음 노드에 대한 참조가 있을 뿐이다.
      따라서 인덱스로 원하는 위치의 데이터를 찾으려면 인덱스 숫자 만큼 다음 노드를 반복해서 찾아야 한다.
      따라서 인덱스 조회 성능이 나쁘다.
      (배열은 인덱스로 원하는 데이터를 즉시 찾을 수 있다. 배열 리스트는 인덱스로 조회시 O(1)의
       빠른 성능을 보장한다.)
2. 추가: void add(Object e)
    - 마지막에 데이터를 추가한다.
    - 마지막 노드를 찾는데 O(n)이 소요된다.
    - 마지막 노드에 새로운 노드를 추가하는데 O(1)이 걸린다. 따라서 O(n)이다.
3. 값 변경: Object set(int index, Object element)
    - 특정 위치에 있는 데이터를 찾아서 변경한다. 그리고 기존 값을 반환한다.
    - 특정 위치의 노드를 찾는데 O(n)이 걸린다.
4. 검색된 인덱스 반환: int indexOf(Object o)
    - 데이터를 검색하고, 검색된 위치를 반환한다.
    - 모든 노드를 순회하면서 equals()를 사용해서 같은 데이터가 있는지 찾는다. O(n)

* 정리
- 연결 리스트를 통해 데이터를 추가하는 방식은 꼭 필요한 메모리만 사용한다.
  따라서 배열 리스트의 단점인 메모리 낭비를 해결할 수 있었다.
  물론 연결을 유지하기 위한 추가 메모리가 사용되는 단점도 함계 존재한다.

<직접 구현하는 연결 리스트2 - 추가와 삭제1>
1. 특정 위치에 추가: void add(int index, Object e)
    - 특정 위치에 데이터를 추가한다.
    - 내부에서 노드도 함께 추가된다.
2. 특정 위치 삭제: Object remove(int index)
    - 특정 위치에 있는 데이터를 제거한다.
    - 내부에서 노드도 함께 제거된다.

== 첫 번째 위치에 데이터 추가 ==
- 연결 리스트는 배열처럼 실제 index가 존재하는 것이 아니다. 처음으로 연결된 노드를 index 0,
  그 다음으로 연결된 노드를 index 1로 가정할 뿐이다. 연결 리스트에서 index는 연결된 순서를 뜻한다.
- 배열의 경우 첫 번째 항목에 데이터가 추가되면 모든 데이터를 오른쪽으로 하나씩 밀어야 하지만
  연결 리스트는 새로 생성한 노드의 참조만 변경하면 된다. 나머지 노드는 어떤 일이 일어난지도 모른다.
- 연결 리스트의 첫 번째 항목에 값을 추가하는 것은 매우 빠르다. O(1)로 표현할 수 있다.

== 첫 번째 위치의 데이터 삭제 ==
- 배열의 경우 첫 번째 항목이 삭제되면 모든 데이터를 왼쪽으로 하나씩 밀어야 하지만 연결 리스트는
  일부 참조만 변경하면 된다. 나머지 노드는 어떤 일이 일어난지도 모른다.
- 연결 리스트의 첫 번째 항목에 값을 삭제하는 것은 매우 빠르다. O(1)로 표현할 수 있다.

== 중간 위치에 데이터 추가 ==
- 배열의 경우 데이터가 추가되면 인덱스 위치 부터 모든 데이터를 오른쪽으로 하나씩 밀어야 하지만
  연결 리스트는 새로 생성한 노드의 참조만 변경하면 된다. 나머지 노드는 어떤 일이 일어난지도 모른다.
- O(n)의 성능이다.
    연결 리스트는 인덱스를 사용해서 노드를 추가할 위치를 찾는데 O(n)이 걸린다.
    위치를 찾고 노드를 추가하는데는 O(1)이 걸린다.
    따라서 둘을 합하면 O(n)이 걸린다.

== 중간 위치의 데이터 삭제 ==
- O(n)의 성능이다.
  연결 리스트에서 인덱스로 삭제할 항목을 찾는데 O(n)이 걸린다.
  연결 리스트에서 항목을 삭제하는 것은 매우 빠르다. O(1)로 표현할 수 있다.
  따라서 둘을 합하면 O(n)이 걸린다.

★연결 리스트와 배열 리스트 둘다 중간에 있는 항목을 추가하거나 삭제하는 경우 둘다 같은 O(n)이다.


* 정리
직접 만든 배열 리스트와 연결 리스트의 성능 비교 표
==========================================
기능          |   배열리스트   |   연결리스트
인덱스 조회    |    O(1)      |     O(n)
검색          |    O(n)      |     O(n)
앞에 추가(삭제) |    O(n)      |     O(1)
뒤에 추가(삭제) |    O(1)      |     O(n)
평균 추가(삭제) |    O(n)      |     O(n)
==========================================

- 배열 리스트는 인덱스를 통해 추가나 삭제할 위치를 O(1)로 빠르게 찾지만, 추가나 삭제 이후
  데이터를 한 칸식 밀어야 한다. 이 부분이 O(n)으로 오래 걸린다.
- 반면 연결 리스트는 인덱스를 통해 추가나 삭제할 위치를 O(n)으로 느리게 찾지만, 찾은 이후에는
  일부 노드의 참조값만 변경하면 되므로 이 부분이 O(1)로 빠르다.
- 앞에 추가하는 경우: 연결 리스트는 배열 리스트처럼 추가한 항목의 오른쪽에 있는 데이터를 모두
  한 칸씩 밀지 않아도 된다. 단순히 일부 노드의 참조만 변경하면 된다. 따라서 데이터를 앞쪽에
  추가하는 경우 보통 연결 리스트가 더 좋은 성능을 제공한다.
    - 배열리스트: 데이터를 앞쪽에 추가하는 경우 모든 데이터를 오른쪽으로 한 칸씩 밀어야 한다. O(n)
    - 연결리스트: 데이터를 앞쪽에 추가하는 경우 일부 노드의 참조만 변경하면 된다. O(1)
- 마지막에 데이터를 추가하는 경우
    - 배열 리스트
        - 인덱스로 마지막 위치를 바로 찾을 수 있다. O(1)
        - 데이터를 마지막에 추가하는 경우 데이터를 이동하지 않아도 된다. O(1)
        - 따라서 O(1)의 성능을 제공한다.
    - 연결 리스트
        - 노드를 마지막까지 순회해야 마지막 노드를 찾을 수 있다. 따라서 마지막 노드를 찾는데
          O(n)의 시간이 걸린다.
        - 데이터를 추가하는 경우 일부 노드의 참조만 변경하면 된다. O(1)
        - 따라서 O(n)의 성능을 제공한다.

== 배열 리스트 vs 연결 리스트 ==
데이터를 조회할 일이 많고, 뒷 부분에 데이터를 추가한다면 배열 리스트가 보통 더 좋은 성능을 제공한다.
앞쪽의 데이터를 추가하거나 삭제할 일이 많다면 연결 리스트를 사용하는 것이 보통 더 좋은 성능을 제공한다.

※참고 - 단인 연결 리스트, 이중 연결 리스트
우리가 구현한 연결 리스트는 한 방향으로만 이동하는 단일 연결 리스트다. 노드를 앞뒤로 모두 연결하는
이중 연결 리스트를 사용하면 성능을 더 개선할 수 있다.
자바가 제공하는 연결 리스트는 이중 연결 리스트다. 추가로 자바가 제공하는 연결 리스트는 마지막
노드를 참조하는 변수를 가지고 있어서, 뒤에 추가하거나 삭제하는 경우에도 O(1)의 성능을 제공한다.

ex) 이중 연결 리스트 예시
public class Node {
    Object item;
    Node next; //다음 노드 참조
    Node prev; //이전 노드 참조
}

ex) 마지막 노드를 참조하는 연결 리스트
public class LinkedList {
    private Node first;
    private Node last; //마지막 노드 참조
    private int size = 0;
}

<직접 구현하는 연결 리스트3 - 제네릭 도입>
지금까지 만든 연결 리스트에 제네릭을 도입해서 타입 안정성을 높인다.
참고로 Node는 외부에서 사용되는 것이 아니라 연결 리스트 내부에서만 사용된다.
따라서 중첩 클래스로 만든다.

제네릭 덕분에 타입 안정성 있는 자료 구조를 만들 수 있다.