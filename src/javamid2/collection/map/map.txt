[Map]

<Map 자료 구조1>
Map은 키-값의 쌍을 저장하는 자료 구조이다.
- 키는 맵 내에서 유일해야 한다. 그리고 키를 통해 빠르게 검색할 수 있다.
- 키는 중복될 수 없지만, 값은 중복될 수 있다.
- Map은 순서를 유지하지 않는다.

자바는 HashMap, TreeMap, LinkedHashMap 등 다양한 Map 구현체를 제공한다.
이들은 Map 인터페이스의 메서드를 구현하며, 각기 다른 특성과 성능 특징을 가지고 있다.

== 키 목록 조회 ==
Map의 키는 중복을 허용하지 않는다. 따라서 Map의 모든 키 목록을 조회하는
keySet()을 호출하면, 중복을 허용하지 않는 자료 구조인 Set을 반환한다.

== 키와 값 목록 조회 - Entry Key-Value Pair ==
- Map은 키와 값을 보관하는 자료 구조이다. 따라서 키와 값을 하나로 묶을 수 있는 방법이 필요하다.
  이때 Entry를 사용한다.

- Entry는 키-값의 쌍으로 이루어진 간단한 객체이다. Entry는 Map 내부에서 키와 값을 함께 묶어서
  저장할 때 사용한다.

- Map에 키와 값으로 데이터를 저장하면 Map은 내부에서 키와 값을 하나로 묶는 Entry 객체를 만들어서 보관한다.
  하나의 Map에 여러 Entry가 저장될 수 있다.
  참고로 Entry는 Map 내부에 있는 인터페이스이다. 구현체 보다는 이 인터페이스를 사용하면 된다.

== 값 목록 조회 - Collection<Integer> values = map.values() ==
Map의 값 목록은 중복을 하용한다. 따라서 중복을 허용하지 않는 Set 으로 반환할 수는 없다.
그리고 입력 순서를 보장하지 않기 때문에 순서를 보장하는 List로 반환하기도 애매하다.
따라서 단순히 값의 모음이라는 의미의 상위 인터페이스인 Collection 으로 반환한다.

<Map 자료 구조2>
Map에 값을 저장할 때 같은 키에 다른 값을 저장하면 기존 값을 교체한다.

key가 없는 경우에만 입력을 하고 싶다면 구현을 해도 되지만 메서드를 사용하면 더 편리하다.
putIfAbsent(): 이 메서드를 사용하면 키가 없는 경우에만 데이터를 저장한다.

<Map 구현체>
자바의 Map 인터페이스는 키-값 쌍을 저장하는 자료 구조이다. Map은 인터페이스이기 때문에,
직접 인스턴스를 생성할 수는 없고, 대신 Map 인터페이스를 구현한 여러 클래스를 통해 사용할 수 있다.
대표적으로 HashMap, TreeMap, LinkedHashMap이 있다.

== Map vs Set ==
- Map의 키는 Set과 같은 구조이다. 그리고 Map은 모든 것이 Key를 중심으로 동작한다.
  Value는 단순히 Key 옆에 따라 붙은 것 뿐이다.
- Key 옆에 Value만 하나 추가해주면 Map이 되는 것이다.
- Map과 Set은 거의 같다. 단지 옆에 Value를 가지고 있는가 없는가의 차이가 있을 뿐이다.

위와 같은 이유로 Set과 Map의 구현체는 거의 같다.
- HashSet -> HashMap
- LinkedHashSet -> LinkedHashMap
- TreeSet -> TreeMap

※참고: 실제고 자바 HashSet의 구현은 대부분 HashMap의 구현을 가져다 사용한다.
       Map 에서 Value만 비워두면 Set 으로 사용할 수 있다.

1. HashMap
- 구조: HashMap은 해시를 사용해서 요소를 저장한다. 키(Key)값은 해시 함수를 통해 해시 코드로 변환되고,
       이 해시 코드는 데이터를 저장하고 검색하는 데 사용된다.
- 특징: 삽입, 삭제, 검색 작업은 해시 자료 구조를 사용하므로 일반적으로 상수 시간(O(1))의 복잡도를 가진다.
- 순서: 순서를 보장하지 않는다.

2. LinkedHashMap
- 구조: LinkedHashMap은 HashMap과 유사하지만, 연결 리스트를 사용해서 삽입 순서 또는 최근 접근 순서에
       따라 요소를 유지한다.
- 특징: 입력 순서에 따라 순회가 가능하다. HashMap과 같지만 입력 순서를 링크로 유지해야 하므로 조금 더 무겁다.
- 성능: HashMap과 유사하게 대부분의 작업은 O(1)의 시간 복잡도를 가진다.
- 순서: 입력 순서를 보장한다.

3. TreeMap
- 구조: TreeMap은 레드-블랙 트리를 기반으로 한 구현이다.
- 특징: 모든 키는 자연 순서 또는 생성자에 제공된 Comparator에 의해 정렬된다.
- 성능: get, put, remove와 같은 주요 작업들은 O(log n)의 시간 복잡도를 가진다.
- 순서: 키는 정렬된 순서로 저장된다. -> 키 자체의 데이터 값을 기준으로 정렬한다.

<자바 HashMap 작동 원리>
자바의 HashMap은 HashSet과 작동 원리가 같다.
Set과 비교
- Key를 사용해서 해시 코드를 생성한다.
- Key 뿐만 아니라 값(Value)을 추가로 저장해야 하기 때문에 Entry를 사용해서 Key, Value를
  하나로 묶어서 저장한다.

★ 해시 테이블
- 해시를 사용해서 키와 값을 저장하는 자료 구조를 일반적으로 해시 테이블이라 한다.
- HashSet은 해시 테이블의 주요 원리를 사용하지만, 키-값 저장 방식 대신 키만 저장하는
  특수한 형태의 해시 테이블로 이해하면 된다.

※주의★
Map의 Key로 사용되는 객체는 hashCode(), equals()를 반드시 구현해야 한다.

* 정리
실무에서 Map이 필요한 경우 HashMap을 많이 사용한다. 그리고 순서 유지, 정렬의 필요에 따라서
LinkedHashMap, TreeMap을 선택하면 된다.






